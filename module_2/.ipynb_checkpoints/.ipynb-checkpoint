{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Суть проекта — отследить влияние условий жизни учащихся в возрасте от 15 до 22 лет на их успеваемость по математике, чтобы на ранней стадии выявлять студентов, находящихся в группе риска.\n",
    "\n",
    "Для этого нужно построить модель, которая предсказывала бы результаты госэкзамена по математике для каждого ученика школы. \n",
    "\n",
    "Переменные, которые содержит датасет:\n",
    "\n",
    "1 school — аббревиатура школы, в которой учится ученик\n",
    "2 sex — пол ученика ('F' - женский, 'M' - мужской)\n",
    "3 age — возраст ученика (от 15 до 22)\n",
    "4 address — тип адреса ученика ('U' - городской, 'R' - за городом)\n",
    "5 famsize — размер семьи('LE3' <= 3, 'GT3' >3)\n",
    "6 Pstatus — статус совместного жилья родителей ('T' - живут вместе 'A' - раздельно)\n",
    "7 Medu — образование матери (0 - нет, 1 - 4 класса, 2 - 5-9 классы, 3 - среднее специальное или 11 классов, 4 - высшее)\n",
    "8 Fedu — образование отца (0 - нет, 1 - 4 класса, 2 - 5-9 классы, 3 - среднее специальное или 11 классов, 4 - высшее)\n",
    "9 Mjob — работа матери ('teacher' - учитель, 'health' - сфера здравоохранения, 'services' - гос служба, 'at_home' - не работает, 'other' - другое)\n",
    "10 Fjob — работа отца ('teacher' - учитель, 'health' - сфера здравоохранения, 'services' - гос служба, 'at_home' - не работает, 'other' - другое)\n",
    "11 reason — причина выбора школы ('home' - близость к дому, 'reputation' - репутация школы, 'course' - образовательная программа, 'other' - другое)\n",
    "12 guardian — опекун ('mother' - мать, 'father' - отец, 'other' - другое)\n",
    "13 traveltime — время в пути до школы (1 - <15 мин., 2 - 15-30 мин., 3 - 30-60 мин., 4 - >60 мин.)\n",
    "14 studytime — время на учёбу помимо школы в неделю (1 - <2 часов, 2 - 2-5 часов, 3 - 5-10 часов, 4 - >10 часов)\n",
    "15 failures — количество внеучебных неудач (n, если 1<=n<3, иначе 4)\n",
    "16 schoolsup — дополнительная образовательная поддержка (yes или no)\n",
    "17 famsup — семейная образовательная поддержка (yes или no)\n",
    "18 paid — дополнительные платные занятия по математике (yes или no)\n",
    "19 activities — дополнительные внеучебные занятия (yes или no)\n",
    "20 nursery — посещал детский сад (yes или no)\n",
    "21 higher — хочет получить высшее образование (yes или no)\n",
    "22 internet — наличие интернета дома (yes или no)\n",
    "23 romantic — в романтических отношениях (yes или no)\n",
    "24 famrel — семейные отношения (от 1 - очень плохо до 5 - очень хорошо)\n",
    "25 freetime — свободное время после школы (от 1 - очень мало до 5 - очень мого)\n",
    "26 goout — проведение времени с друзьями (от 1 - очень мало до 5 - очень много)\n",
    "27 health — текущее состояние здоровья (от 1 - очень плохо до 5 - очень хорошо)\n",
    "28 absences — количество пропущенных занятий\n",
    "29 score — баллы по госэкзамену по математике\n",
    "\n",
    "\n",
    "**Рекомендации по выполнению проекта:**\n",
    "-Проведите первичную обработку данных. Так как данных много, стоит написать функции, которые можно применять к столбцам -определённого типа.\n",
    "Посмотрите на распределение признака для числовых переменных, устраните выбросы.\n",
    "-Оцените количество уникальных значений для номинативных переменных.\n",
    "-По необходимости преобразуйте данные\n",
    "-Проведите корреляционный анализ количественных переменных\n",
    "-Отберите не коррелирующие переменные.\n",
    "-Проанализируйте номинативные переменные и устраните те, которые не влияют на предсказываемую величину (в нашем случае — на переменную score).\n",
    "-Не забудьте сформулировать выводы относительно качества данных и тех переменных, которые вы будете использовать в дальнейшем построении модели."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>school</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>address</th>\n",
       "      <th>famsize</th>\n",
       "      <th>Pstatus</th>\n",
       "      <th>Medu</th>\n",
       "      <th>Fedu</th>\n",
       "      <th>Mjob</th>\n",
       "      <th>Fjob</th>\n",
       "      <th>reason</th>\n",
       "      <th>guardian</th>\n",
       "      <th>traveltime</th>\n",
       "      <th>studytime</th>\n",
       "      <th>failures</th>\n",
       "      <th>schoolsup</th>\n",
       "      <th>famsup</th>\n",
       "      <th>paid</th>\n",
       "      <th>activities</th>\n",
       "      <th>nursery</th>\n",
       "      <th>studytime, granular</th>\n",
       "      <th>higher</th>\n",
       "      <th>internet</th>\n",
       "      <th>romantic</th>\n",
       "      <th>famrel</th>\n",
       "      <th>freetime</th>\n",
       "      <th>goout</th>\n",
       "      <th>health</th>\n",
       "      <th>absences</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>18</td>\n",
       "      <td>U</td>\n",
       "      <td>NaN</td>\n",
       "      <td>A</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>at_home</td>\n",
       "      <td>teacher</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>-6.0</td>\n",
       "      <td>yes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>no</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>17</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>at_home</td>\n",
       "      <td>other</td>\n",
       "      <td>course</td>\n",
       "      <td>father</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>-6.0</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>15</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>at_home</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>mother</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>NaN</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>-6.0</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>15</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>health</td>\n",
       "      <td>NaN</td>\n",
       "      <td>home</td>\n",
       "      <td>mother</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>75.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>16</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>home</td>\n",
       "      <td>father</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>-6.0</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  school sex  age address famsize Pstatus  Medu  Fedu     Mjob     Fjob  \\\n",
       "0     GP   F   18       U     NaN       A   4.0   4.0  at_home  teacher   \n",
       "1     GP   F   17       U     GT3     NaN   1.0   1.0  at_home    other   \n",
       "2     GP   F   15       U     LE3       T   1.0   1.0  at_home    other   \n",
       "3     GP   F   15       U     GT3       T   4.0   2.0   health      NaN   \n",
       "4     GP   F   16       U     GT3       T   3.0   3.0    other    other   \n",
       "\n",
       "   reason guardian  traveltime  studytime  failures schoolsup famsup paid  \\\n",
       "0  course   mother         2.0        2.0       0.0       yes     no   no   \n",
       "1  course   father         1.0        2.0       0.0        no    yes   no   \n",
       "2   other   mother         1.0        2.0       3.0       yes     no  NaN   \n",
       "3    home   mother         1.0        3.0       0.0        no    yes  yes   \n",
       "4    home   father         1.0        2.0       0.0        no    yes  yes   \n",
       "\n",
       "  activities nursery  studytime, granular higher internet romantic  famrel  \\\n",
       "0         no     yes                 -6.0    yes      NaN       no     4.0   \n",
       "1         no      no                 -6.0    yes      yes       no     5.0   \n",
       "2         no     yes                 -6.0    yes      yes      NaN     4.0   \n",
       "3        yes     yes                 -9.0    yes      yes      yes     3.0   \n",
       "4         no     yes                 -6.0    yes       no       no     4.0   \n",
       "\n",
       "   freetime  goout  health  absences  score  \n",
       "0       3.0    4.0     3.0       6.0   30.0  \n",
       "1       3.0    3.0     3.0       4.0   30.0  \n",
       "2       3.0    2.0     3.0      10.0   50.0  \n",
       "3       2.0    2.0     5.0       2.0   75.0  \n",
       "4       3.0    2.0     5.0       4.0   50.0  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 395 entries, 0 to 394\n",
      "Data columns (total 30 columns):\n",
      "school                 395 non-null object\n",
      "sex                    395 non-null object\n",
      "age                    395 non-null int64\n",
      "address                378 non-null object\n",
      "famsize                368 non-null object\n",
      "Pstatus                350 non-null object\n",
      "Medu                   392 non-null float64\n",
      "Fedu                   371 non-null float64\n",
      "Mjob                   376 non-null object\n",
      "Fjob                   359 non-null object\n",
      "reason                 378 non-null object\n",
      "guardian               364 non-null object\n",
      "traveltime             367 non-null float64\n",
      "studytime              388 non-null float64\n",
      "failures               373 non-null float64\n",
      "schoolsup              386 non-null object\n",
      "famsup                 356 non-null object\n",
      "paid                   355 non-null object\n",
      "activities             381 non-null object\n",
      "nursery                379 non-null object\n",
      "studytime, granular    388 non-null float64\n",
      "higher                 375 non-null object\n",
      "internet               361 non-null object\n",
      "romantic               364 non-null object\n",
      "famrel                 368 non-null float64\n",
      "freetime               384 non-null float64\n",
      "goout                  387 non-null float64\n",
      "health                 380 non-null float64\n",
      "absences               383 non-null float64\n",
      "score                  389 non-null float64\n",
      "dtypes: float64(12), int64(1), object(17)\n",
      "memory usage: 92.7+ KB\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from itertools import combinations\n",
    "from scipy.stats import ttest_ind\n",
    "\n",
    "pd.set_option('display.max_rows', 50) # выведем больше строк\n",
    "pd.set_option('display.max_columns', 50) # выведем больше колонок\n",
    "stud_math = pd.read_csv('stud_math.csv')\n",
    "display(stud_math.head(5)) #Рассмотрим, какие данные хранятся в файле и какие типы данных у столбцов:\n",
    "stud_math.info() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 395 строк, 13 числовых столбцов и 17 - строковых.\n",
    "Теперь рассмотрим все 29 (!) столбцов по отдельности. Первый с индексами рассматривать не будем."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.  school \n",
    "Аббревиатура школы, в которой учится ученик. \n",
    "Это строковый столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 395 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "school    395 non-null object\n",
      "dtypes: object(1)\n",
      "memory usage: 3.2+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>school</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>GP</td>\n",
       "      <td>349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>MS</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    school\n",
       "GP     349\n",
       "MS      46"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>school</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>GP</td>\n",
       "      <td>0.883544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>MS</td>\n",
       "      <td>0.116456</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      school\n",
       "GP  0.883544\n",
       "MS  0.116456"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['school']].info()\n",
    "display(pd.DataFrame(stud_math.school.value_counts()))\n",
    "display(pd.DataFrame(stud_math.school.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по столбцу 'school':**\n",
    "\n",
    "Строковый столбец без пропусков. \n",
    "У нас всего 2 школы, в школе GP учится 88% всех учеников, в школе MS 12% учеников.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.  sex\n",
    "- пол ученика ('F' - женский, 'M' - мужской). Это строковый столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 395 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "sex    395 non-null object\n",
      "dtypes: object(1)\n",
      "memory usage: 3.2+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>F</td>\n",
       "      <td>208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>M</td>\n",
       "      <td>187</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sex\n",
       "F  208\n",
       "M  187"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>F</td>\n",
       "      <td>0.526582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>M</td>\n",
       "      <td>0.473418</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        sex\n",
       "F  0.526582\n",
       "M  0.473418"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['sex']].info()\n",
    "display(pd.DataFrame(stud_math.sex.value_counts()))\n",
    "display(pd.DataFrame(stud_math.sex.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по столбцу 'sex':** \n",
    "\n",
    "Строковый столбец без пропусков, всего учится 53% девочек и 47% мальчиков."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. age\n",
    "\n",
    "- возраст ученика (от 15 до 22)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 395 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "age    395 non-null int64\n",
      "dtypes: int64(1)\n",
      "memory usage: 3.2 KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>16</td>\n",
       "      <td>104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17</td>\n",
       "      <td>98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    age\n",
       "16  104\n",
       "17   98\n",
       "18   82\n",
       "15   82\n",
       "19   24\n",
       "20    3\n",
       "22    1\n",
       "21    1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['age']].info()\n",
    "display(pd.DataFrame(stud_math.age.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Это числовой столбец, поэтому посмотрим на его распределение"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    395.000000\n",
       "mean      16.696203\n",
       "std        1.276043\n",
       "min       15.000000\n",
       "25%       16.000000\n",
       "50%       17.000000\n",
       "75%       18.000000\n",
       "max       22.000000\n",
       "Name: age, dtype: float64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.age.hist()\n",
    "stud_math.age.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как видим по этому признаку у нас могут быть выбросы. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16.0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Найдем первый квартиль\n",
    "pd.DataFrame(stud_math.age.value_counts())\n",
    "perc25=stud_math.age.quantile(0.25, interpolation='midpoint')\n",
    "perc25"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "18.0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Найдем третий квартиль\n",
    "df=pd.DataFrame(stud_math)\n",
    "perc75=stud_math.age.quantile(0.75, interpolation='midpoint')\n",
    "perc75"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Найдем межквартильный размах\n",
    "df=pd.DataFrame(stud_math)\n",
    "df['age'].quantile(0.75, interpolation='midpoint')\n",
    "IQR=df['age'].quantile(0.75)-df['age'].quantile(0.25)\n",
    "IQR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Посмотрим есть ли выбросы в столбце 'age'\n",
    "V_1=df['age'].quantile(0.75, interpolation='midpoint')+1.5*IQR\n",
    "V_1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "У нас есть 2 выброса: 21 и 22 года, удалим их из нашего DF, чтобы не портили нам статистику"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    393.000000\n",
       "mean      16.671756\n",
       "std        1.231658\n",
       "min       15.000000\n",
       "25%       16.000000\n",
       "50%       17.000000\n",
       "75%       18.000000\n",
       "max       20.000000\n",
       "Name: age, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math = stud_math.loc[stud_math.age<21]\n",
    "stud_math.age.hist()\n",
    "stud_math.age.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по столбцу 'age':**\n",
    "\n",
    "Это числовой столбец. Пропусков нет, зато есть выбросы 21 и 22 года.\n",
    "Теперь у нас изменились данные с учетом 2х выбросов в 21 и 22 года.\n",
    "Самый популярный возраст 16 лет.\n",
    "Средний возраст учеников 16,7 лет. Миниальный 15 лет, максимальный 20."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. address\n",
    "\n",
    "- тип адреса ученика ('U' - городской, 'R' - за городом).\n",
    "Это строковый столбец"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "address    376 non-null object\n",
      "dtypes: object(1)\n",
      "memory usage: 6.1+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>address</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>U</td>\n",
       "      <td>294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>R</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   address\n",
       "U      294\n",
       "R       82"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['address']].info()\n",
    "display(pd.DataFrame(stud_math.address.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас есть 17 пустых значений.\n",
    "Используя простой метод, заменим пустые значения модой признака. В данном случае это 'U'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>address</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>U</td>\n",
       "      <td>311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>R</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   address\n",
       "U      311\n",
       "R       82"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>address</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>U</td>\n",
       "      <td>0.791349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>R</td>\n",
       "      <td>0.208651</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    address\n",
       "U  0.791349\n",
       "R  0.208651"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.address = stud_math.address.apply(lambda x: 'U' if str(x).strip() == '' else 'U' if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.address.value_counts()))\n",
    "display(pd.DataFrame(stud_math.address.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по столбцу 'address':** \n",
    "\n",
    "В этом строковом столбце было 17 попусков, которые мы заменили на самое частое значение (мода), в данном случае на 'U'.\n",
    "\n",
    "Большинство адресов (79%) находятся в U (в рамках города)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5 famsize\n",
    "- размер семьи('LE3' <= 3, 'GT3' >3). Это строковый столбец"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "famsize    366 non-null object\n",
      "dtypes: object(1)\n",
      "memory usage: 6.1+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>famsize</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>GT3</td>\n",
       "      <td>259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>LE3</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     famsize\n",
       "GT3      259\n",
       "LE3      107"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['famsize']].info()\n",
    "display(pd.DataFrame(stud_math.famsize.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 27 пустых значений.\n",
    "Используя простой метод, заменим пустые значения модой признака. В данном случае это 'GT3'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>famsize</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>GT3</td>\n",
       "      <td>286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>LE3</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     famsize\n",
       "GT3      286\n",
       "LE3      107"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>famsize</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>GT3</td>\n",
       "      <td>0.727735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>LE3</td>\n",
       "      <td>0.272265</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      famsize\n",
       "GT3  0.727735\n",
       "LE3  0.272265"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.famsize = stud_math.famsize.apply(lambda x: 'GT3' if str(x).strip() == '' else 'GT3' if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.famsize.value_counts()))\n",
    "display(pd.DataFrame(stud_math.famsize.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'famsize':** \n",
    "\n",
    "В нашем строковом столбце было 17 пропусков по размеру семьи.\n",
    "Мы заменили их на самое частое значение (моду), в данном случае это GT3(размер семьи>3)\n",
    "После обработки мы видим, что 73% всех семей имеют больше 3х членов семьи, а 27% - менее 3х."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6 Pstatus \n",
    "- статус совместного жилья родителей ('T' - живут вместе 'A' - раздельно). Это строковый столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "Pstatus    348 non-null object\n",
      "dtypes: object(1)\n",
      "memory usage: 6.1+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pstatus</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>T</td>\n",
       "      <td>312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>A</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pstatus\n",
       "T      312\n",
       "A       36"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['Pstatus']].info()\n",
    "display(pd.DataFrame(stud_math.Pstatus.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 45 пустых значений.\n",
    "Используя простой метод, заменим пустые значения модой признака. В данном случае это 'T'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pstatus</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>T</td>\n",
       "      <td>357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>A</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pstatus\n",
       "T      357\n",
       "A       36"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pstatus</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>T</td>\n",
       "      <td>0.908397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>A</td>\n",
       "      <td>0.091603</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Pstatus\n",
       "T  0.908397\n",
       "A  0.091603"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.Pstatus = stud_math.Pstatus.apply(lambda x: 'T' if str(x).strip() == '' else 'T' if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.Pstatus.value_counts()))\n",
    "display(pd.DataFrame(stud_math.Pstatus.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'Pstatus':** \n",
    "\n",
    "В нашем строковом столбце было 45 пустых значений.\n",
    "Мы заменили их на самое частое значение (моду), в данном случае это T('T' - живут вместе 'A' - раздельно)\n",
    "После обработки у нас в 91% всех семей родители живут вместе."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7 Medu \n",
    "- Образование матери (0 - нет, 1 - 4 класса, 2 - 5-9 классы, 3 - среднее специальное или 11 классов, 4 - высшее). Это числовой столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Medu</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>131</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Medu\n",
       "4.0   131\n",
       "2.0   102\n",
       "3.0    96\n",
       "1.0    58\n",
       "0.0     3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "Medu    390 non-null float64\n",
      "dtypes: float64(1)\n",
      "memory usage: 6.1 KB\n"
     ]
    }
   ],
   "source": [
    "display(pd.DataFrame(stud_math.Medu.value_counts()))\n",
    "stud_math.loc[:, ['Medu']].info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 3 пустых значения. Используя простой метод, заменим пустые значения модой признака. В данном случае это '4.0'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Medu</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Medu\n",
       "4.0   134\n",
       "2.0   102\n",
       "3.0    96\n",
       "1.0    58\n",
       "0.0     3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Medu</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>0.340967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>0.259542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>0.244275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>0.147583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0.0</td>\n",
       "      <td>0.007634</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Medu\n",
       "4.0  0.340967\n",
       "2.0  0.259542\n",
       "3.0  0.244275\n",
       "1.0  0.147583\n",
       "0.0  0.007634"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.Medu = stud_math.Medu.apply(lambda x: 4.0 if str(x).strip() == '' else 4.0 if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.Medu.value_counts()))\n",
    "display(pd.DataFrame(stud_math.Medu.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Пропуски убрали, теперь посмотрим на его распределение:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    393.000000\n",
       "mean       2.763359\n",
       "std        1.098459\n",
       "min        0.000000\n",
       "25%        2.000000\n",
       "50%        3.000000\n",
       "75%        4.000000\n",
       "max        4.000000\n",
       "Name: Medu, dtype: float64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.Medu.hist()\n",
    "stud_math.Medu.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как видим по этому признаку у нас могут быть выбросы. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25-й перцентиль: 2.0, 75-й перцентиль: 4.0, IQR: 2.0,  Границы выбросов: [-1.0, 7.0].\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "median = stud_math.Medu.median()\n",
    "IQR = stud_math.Medu.quantile(0.75) - stud_math.Medu.quantile(0.25)\n",
    "perc25 = stud_math.Medu.quantile(0.25)\n",
    "perc75 = stud_math.Medu.quantile(0.75)\n",
    "print('25-й перцентиль: {},'.format(perc25), '75-й перцентиль: {},'.format(perc75)\n",
    "      , \"IQR: {}, \".format(IQR),\"Границы выбросов: [{f}, {l}].\".format(f=perc25 - 1.5*IQR, l=perc75 + 1.5*IQR))\n",
    "stud_math.Medu.loc[stud_math.Medu.between(perc25 - 1.5*IQR, perc75 + 1.5*IQR)].hist(bins = 16\n",
    "                                                                                              , range = (0.0, 4.0), \n",
    "                                                                                             label = 'IQR')\n",
    "stud_math.Medu.loc[stud_math.Medu >= 1.0].hist(alpha = 0.5, bins = 16, range = (0.0, 4.0),\n",
    "                                                        label = 'Здравый смысл')\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'Medu':**  \n",
    "\n",
    "Это числовой столбец. Были пропуски, которые мы заменили на самое частое значение, в данном случае это '4.0'(0 - нет, 1 - 4 класса, 2 - 5-9 классы, 3 - среднее специальное или 11 классов, 4 - высшее). Выбросов нет.\n",
    "34% матерей имеют высшее образование, меньше 1% не имеет образования совсем."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8 Fedu \n",
    "- образование отца (0 - нет, 1 - 4 класса, 2 - 5-9 классы, 3 - среднее специальное или 11 классов, 4 - высшее). Это числовой стлбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "Fedu    369 non-null float64\n",
      "dtypes: float64(1)\n",
      "memory usage: 6.1 KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fedu</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>40.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Fedu\n",
       "2.0    106\n",
       "3.0     96\n",
       "4.0     88\n",
       "1.0     76\n",
       "0.0      2\n",
       "40.0     1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['Fedu']].info()\n",
    "display(pd.DataFrame(stud_math.Fedu.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 24 пустых значений. А также ощибка '40.0'. Используя простой метод, заменим пустые значения модой признака. В данном случае это '2.0'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fedu</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>131</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Fedu\n",
       "2.0   131\n",
       "3.0    96\n",
       "4.0    88\n",
       "1.0    76\n",
       "0.0     2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fedu</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>0.244275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>0.223919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>0.193384</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0.0</td>\n",
       "      <td>0.005089</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Fedu\n",
       "2.0  0.333333\n",
       "3.0  0.244275\n",
       "4.0  0.223919\n",
       "1.0  0.193384\n",
       "0.0  0.005089"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.Fedu = stud_math.Fedu.apply(lambda x: 2.0 if str(x).strip() == '' else 2.0 if pd.isna(x)  else 2.0 if str(x).strip() == '40.0' else x)\n",
    "display(pd.DataFrame(stud_math.Fedu.value_counts()))\n",
    "display(pd.DataFrame(stud_math.Fedu.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Пропуски и ошибки убрали, теперь посмотрим на его распределение:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    393.000000\n",
       "mean       2.488550\n",
       "std        1.057286\n",
       "min        0.000000\n",
       "25%        2.000000\n",
       "50%        2.000000\n",
       "75%        3.000000\n",
       "max        4.000000\n",
       "Name: Fedu, dtype: float64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.Fedu.hist()\n",
    "stud_math.Fedu.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'Fedu':**\n",
    "\n",
    "Это числовой столбец. В колонке была ошибка со значением 40.0, а также 24 пустых значения. Мы их заменили на моду '2.0'(0 - нет, 1 - 4 класса, 2 - 5-9 классы, 3 - среднее специальное или 11 классов, 4 - высшее).\n",
    "Большинство (33%) отцов имеют высшее образование 5-9 классов, и меньше 1% - вообще не имеют образования."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 9 Mjob \n",
    "- работа матери ('teacher' - учитель, 'health' - сфера здравоохранения, 'services' - гос служба, 'at_home' - не работает, 'other' - другое). Это строковый столбец"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "Mjob    374 non-null object\n",
      "dtypes: object(1)\n",
      "memory usage: 6.1+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mjob</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>other</td>\n",
       "      <td>132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>services</td>\n",
       "      <td>97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>at_home</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>teacher</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>health</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Mjob\n",
       "other      132\n",
       "services    97\n",
       "at_home     58\n",
       "teacher     55\n",
       "health      32"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['Mjob']].info()\n",
    "display(pd.DataFrame(stud_math.Mjob.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 19 пустых значений. Используя простой метод, заменим пустые значения модой признака. В данном случае это 'other'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mjob</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>other</td>\n",
       "      <td>151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>services</td>\n",
       "      <td>97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>at_home</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>teacher</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>health</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Mjob\n",
       "other      151\n",
       "services    97\n",
       "at_home     58\n",
       "teacher     55\n",
       "health      32"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mjob</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>other</td>\n",
       "      <td>0.384224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>services</td>\n",
       "      <td>0.246819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>at_home</td>\n",
       "      <td>0.147583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>teacher</td>\n",
       "      <td>0.139949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>health</td>\n",
       "      <td>0.081425</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Mjob\n",
       "other     0.384224\n",
       "services  0.246819\n",
       "at_home   0.147583\n",
       "teacher   0.139949\n",
       "health    0.081425"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.Mjob = stud_math.Mjob.apply(lambda x: 'other' if str(x).strip() == '' else 'other' if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.Mjob.value_counts()))\n",
    "display(pd.DataFrame(stud_math.Mjob.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'Mjob':**\n",
    "\n",
    "Это строковый столбец. В колонке есть 19 незаполненных значений. Мы заменили их на моду 'other'(другое). Большинство 38% матерей выбрали графу по работе \"другое\". Меньше всего (8%) работат в сфере здравоохранения."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 10 Fjob\n",
    "- работа отца ('teacher' - учитель, 'health' - сфера здравоохранения, 'services' - гос служба, 'at_home' - не работает, 'other' - другое). Это строковый столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "Fjob    357 non-null object\n",
      "dtypes: object(1)\n",
      "memory usage: 6.1+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fjob</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>other</td>\n",
       "      <td>196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>services</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>teacher</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>at_home</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>health</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Fjob\n",
       "other      196\n",
       "services   101\n",
       "teacher     29\n",
       "at_home     16\n",
       "health      15"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['Fjob']].info()\n",
    "display(pd.DataFrame(stud_math.Fjob.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 36 пустых значений. Используя простой метод, заменим пустые значения модой признака. В данном случае это 'other'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fjob</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>other</td>\n",
       "      <td>232</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>services</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>teacher</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>at_home</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>health</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Fjob\n",
       "other      232\n",
       "services   101\n",
       "teacher     29\n",
       "at_home     16\n",
       "health      15"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fjob</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>other</td>\n",
       "      <td>0.590331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>services</td>\n",
       "      <td>0.256997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>teacher</td>\n",
       "      <td>0.073791</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>at_home</td>\n",
       "      <td>0.040712</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>health</td>\n",
       "      <td>0.038168</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Fjob\n",
       "other     0.590331\n",
       "services  0.256997\n",
       "teacher   0.073791\n",
       "at_home   0.040712\n",
       "health    0.038168"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.Fjob = stud_math.Fjob.apply(lambda x: 'other' if str(x).strip() == '' else 'other' if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.Fjob.value_counts()))\n",
    "display(pd.DataFrame(stud_math.Fjob.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'Fjob':**\n",
    "\n",
    "Это строковый столбец. В колонке есть 36 незаполненных значений. Мы заменили их на моду 'other'(другое). Большинство 59% отцов выбрали графу по работе \"другое\". Меньше всего (4%) работат в сфере здравоохранения."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 11 reason\n",
    "- причина выбора школы ('home' - близость к дому, 'reputation' - репутация школы, 'course' - образовательная программа, 'other' - другое). Это строковый столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "reason    376 non-null object\n",
      "dtypes: object(1)\n",
      "memory usage: 6.1+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reason</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>course</td>\n",
       "      <td>136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>home</td>\n",
       "      <td>104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>reputation</td>\n",
       "      <td>103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>other</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            reason\n",
       "course         136\n",
       "home           104\n",
       "reputation     103\n",
       "other           33"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['reason']].info()\n",
    "display(pd.DataFrame(stud_math.reason.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 17 пустых значений. Используя простой метод, заменим пустые значения модой признака. В данном случае это 'course'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reason</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>course</td>\n",
       "      <td>153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>home</td>\n",
       "      <td>104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>reputation</td>\n",
       "      <td>103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>other</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            reason\n",
       "course         153\n",
       "home           104\n",
       "reputation     103\n",
       "other           33"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reason</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>course</td>\n",
       "      <td>0.389313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>home</td>\n",
       "      <td>0.264631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>reputation</td>\n",
       "      <td>0.262087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>other</td>\n",
       "      <td>0.083969</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              reason\n",
       "course      0.389313\n",
       "home        0.264631\n",
       "reputation  0.262087\n",
       "other       0.083969"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.reason = stud_math.reason.apply(lambda x: 'course' if str(x).strip() == '' else 'course' if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.reason.value_counts()))\n",
    "display(pd.DataFrame(stud_math.reason.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'reason':**\n",
    "\n",
    "Это строковый столбец. В колонке есть 17 незаполненных строк. мы заменили их на самое частое значение 'course' ('home' - близость к дому, 'reputation' - репутация школы, 'course' - образовательная программа, 'other' - другое). Больше всего (39%) семей выбрали школу из-за образовательной программы. А меньше всего (8%) по другим причинам."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 12 guardian\n",
    "- опекун ('mother' - мать, 'father' - отец, 'other' - другое). Это строковый столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "guardian    363 non-null object\n",
      "dtypes: object(1)\n",
      "memory usage: 6.1+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>guardian</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>mother</td>\n",
       "      <td>249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>father</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>other</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        guardian\n",
       "mother       249\n",
       "father        86\n",
       "other         28"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['guardian']].info()\n",
    "display(pd.DataFrame(stud_math.guardian.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 30 пустых значений. Используя простой метод, заменим пустые значения модой признака. В данном случае это 'mother'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>guardian</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>mother</td>\n",
       "      <td>279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>father</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>other</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        guardian\n",
       "mother       279\n",
       "father        86\n",
       "other         28"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>guardian</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>mother</td>\n",
       "      <td>0.709924</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>father</td>\n",
       "      <td>0.218830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>other</td>\n",
       "      <td>0.071247</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        guardian\n",
       "mother  0.709924\n",
       "father  0.218830\n",
       "other   0.071247"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.guardian = stud_math.guardian.apply(lambda x: 'mother' if str(x).strip() == '' else 'mother' if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.guardian.value_counts()))\n",
    "display(pd.DataFrame(stud_math.guardian.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'guardian':**\n",
    "\n",
    "Это строковый столбецю В колонке есть 30 незаполненных строк, мы заменили их на самое часто значение, в нашем случае это 'mother' ('mother' - мать, 'father' - отец, 'other' - другое).  Больше всего (70%) опекунов -это матери. Меньше всего (7%) выбрали другой вариант."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 13 traveltime\n",
    "- время в пути до школы (1 - <15 мин., 2 - 15-30 мин., 3 - 30-60 мин., 4 - >60 мин.). Это числовой столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "traveltime    365 non-null float64\n",
      "dtypes: float64(1)\n",
      "memory usage: 6.1 KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>traveltime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     traveltime\n",
       "1.0         240\n",
       "2.0          96\n",
       "3.0          22\n",
       "4.0           7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['traveltime']].info()\n",
    "display(pd.DataFrame(stud_math.traveltime.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 28 пустых значений. Используя простой метод, заменим пустые значения модой признака. В данном случае это '1.0'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>traveltime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     traveltime\n",
       "1.0         268\n",
       "2.0          96\n",
       "3.0          22\n",
       "4.0           7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>traveltime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>0.681934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>0.244275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>0.055980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>0.017812</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     traveltime\n",
       "1.0    0.681934\n",
       "2.0    0.244275\n",
       "3.0    0.055980\n",
       "4.0    0.017812"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.traveltime = stud_math.traveltime.apply(lambda x: 1.0 if str(x).strip() == '' else 1.0 if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.traveltime.value_counts()))\n",
    "display(pd.DataFrame(stud_math.traveltime.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Пропуски убрали, теперь посмотрим на его распределение:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    393.000000\n",
       "mean       1.409669\n",
       "std        0.679592\n",
       "min        1.000000\n",
       "25%        1.000000\n",
       "50%        1.000000\n",
       "75%        2.000000\n",
       "max        4.000000\n",
       "Name: traveltime, dtype: float64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.traveltime.hist()\n",
    "stud_math.traveltime.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'traveltime':**\n",
    "\n",
    "Это числовой столбец.В колонке есть 28 пустых значений, мы заменили их на самое часто значение '1.0' (1 - <15 мин., 2 - 15-30 мин., 3 - 30-60 мин., 4 - >60 мин.). Выбросов нет. Больше всего (68%) семей тратят время на дорогу до школы не более 15 мин, и лишь 2% семей - больше часа.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 14 studytime\n",
    "- время на учёбу помимо школы в неделю (1 - <2 часов, 2 - 2-5 часов, 3 - 5-10 часов, 4 - >10 часов). Это числовой столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "studytime    386 non-null float64\n",
      "dtypes: float64(1)\n",
      "memory usage: 6.1 KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>studytime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     studytime\n",
       "2.0        194\n",
       "1.0        101\n",
       "3.0         64\n",
       "4.0         27"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['studytime']].info()\n",
    "display(pd.DataFrame(stud_math.studytime.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 7 пустых значений. Используя простой метод, заменим пустые значения модой признака. В данном случае это '2.0'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>studytime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     studytime\n",
       "2.0        201\n",
       "1.0        101\n",
       "3.0         64\n",
       "4.0         27"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>studytime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>0.511450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>0.256997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>0.162850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>0.068702</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     studytime\n",
       "2.0   0.511450\n",
       "1.0   0.256997\n",
       "3.0   0.162850\n",
       "4.0   0.068702"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.studytime = stud_math.studytime.apply(lambda x: 2.0 if str(x).strip() == '' else 2.0 if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.studytime.value_counts()))\n",
    "display(pd.DataFrame(stud_math.studytime.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Пропуски убрали, теперь посмотрим на его распределение."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    393.000000\n",
       "mean       2.043257\n",
       "std        0.833398\n",
       "min        1.000000\n",
       "25%        1.000000\n",
       "50%        2.000000\n",
       "75%        2.000000\n",
       "max        4.000000\n",
       "Name: studytime, dtype: float64"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.studytime.hist()\n",
    "stud_math.studytime.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'studytime':**\n",
    "\n",
    "Это числовой столбец. В колонке есть 7 незаполненных строк, мы заменили их на самое частое значение '2.0' (1 - <2 часов, 2 - 2-5 часов, 3 - 5-10 часов, 4 - >10 часов). Выбросов нет. Больше всего (51%) ученики тратят время на учебу помимо школы от 2-5 часов в день, а 7 % больше 10 часов в день."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 15 failures\n",
    "- количество внеучебных неудач (n, если 1<=n<3, иначе 4). Это числовой столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "failures    371 non-null float64\n",
      "dtypes: float64(1)\n",
      "memory usage: 6.1 KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>failures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0.0</td>\n",
       "      <td>293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     failures\n",
       "0.0       293\n",
       "1.0        49\n",
       "2.0        16\n",
       "3.0        13"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['failures']].info()\n",
    "display(pd.DataFrame(stud_math.failures.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В данном столбце у нас больше всего (293) у значения '0.0', которого не было даже в описании. Это значит, или тут какая-то ошибка, или люди целенаправленно ставили '0', чтобы показать что у них нет неудач. Также как и значения '4' тут также нет.\n",
    "Поэтому данный столбец не несет никакой смысловой нагрузки, т.к. вся информация искажена, и мы его просто удалим."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "stud_math.drop(['failures'], inplace = True, axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'failures':**\n",
    "\n",
    "Это числовой столбец. Мы решили его удалить,т.к. в данном столбце у нас больше всего (293) у значения '0.0', которого не было даже в описании. Это значит, или тут какая-то ошибка, или люди целенаправленно ставили '0', чтобы показать что у них нет неудач. Также как и значения '4' тут также нет. Поэтому данный столбец не несет никакой смысловой нагрузки, т.к. вся информация искажена."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 16 schoolsup\n",
    "- дополнительная образовательная поддержка (yes или no). Это строковый столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "schoolsup    385 non-null object\n",
      "dtypes: object(1)\n",
      "memory usage: 6.1+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>schoolsup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>334</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     schoolsup\n",
       "no         334\n",
       "yes         51"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['schoolsup']].info()\n",
    "display(pd.DataFrame(stud_math.schoolsup.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 8 пустых значений. Используя простой метод, заменим пустые значения модой признака. В данном случае это 'no'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>schoolsup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     schoolsup\n",
       "no         342\n",
       "yes         51"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>schoolsup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>0.870229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>0.129771</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     schoolsup\n",
       "no    0.870229\n",
       "yes   0.129771"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.schoolsup = stud_math.schoolsup.apply(lambda x: 'no' if str(x).strip() == '' else 'no' if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.schoolsup.value_counts()))\n",
    "display(pd.DataFrame(stud_math.schoolsup.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'fschoolsup':**\n",
    "\n",
    "Это строковый столбец. В колонке есть 8 незаполненных строк, мы заменили их на самое частое значение 'no' . Больше всего (87%) учеников не пользуются дополнительной образовательной поддержкой."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 17 famsup\n",
    "- семейная образовательная поддержка (yes или no). Это строковый столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "famsup    354 non-null object\n",
      "dtypes: object(1)\n",
      "memory usage: 6.1+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>famsup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>135</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     famsup\n",
       "yes     219\n",
       "no      135"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['famsup']].info()\n",
    "display(pd.DataFrame(stud_math.famsup.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 39 пустых значений. Используя простой метод, заменим пустые значения модой признака. В данном случае это 'yes'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>famsup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>135</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     famsup\n",
       "yes     258\n",
       "no      135"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>famsup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>0.656489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>0.343511</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       famsup\n",
       "yes  0.656489\n",
       "no   0.343511"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.famsup = stud_math.famsup.apply(lambda x: 'yes' if str(x).strip() == '' else 'yes' if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.famsup.value_counts()))\n",
    "display(pd.DataFrame(stud_math.famsup.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'famsup':**\n",
    "\n",
    "Это строковый столбец. В колонке есть 39 пустых значений, мы заменили их на самое частое значение 'yes' . Больше всего (66%) учеников пользуются семейной образовательной поддержкой."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 18 paid\n",
    "- дополнительные платные занятия по математике (yes или no). Это строковый столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "paid    353 non-null object\n",
      "dtypes: object(1)\n",
      "memory usage: 6.1+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>paid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>155</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     paid\n",
       "no    198\n",
       "yes   155"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['paid']].info()\n",
    "display(pd.DataFrame(stud_math.paid.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 40 пустых значений. Используя простой метод, заменим самым частым значением. В данном случае это 'no'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>paid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>155</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     paid\n",
       "no    238\n",
       "yes   155"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>paid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>0.605598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>0.394402</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         paid\n",
       "no   0.605598\n",
       "yes  0.394402"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.paid = stud_math.paid.apply(lambda x: 'no' if str(x).strip() == '' else 'no' if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.paid.value_counts()))\n",
    "display(pd.DataFrame(stud_math.paid.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'paid':**\n",
    "\n",
    "Это строковый столбец. В колонке есть 40 незаполненных строк, мы заменили их на самое частое значение 'no' . Большинство 60% семей не платят за доп.занятия по математике."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 19 activities\n",
    "- дополнительные внеучебные занятия (yes или no). Это строковый столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "activities    379 non-null object\n",
      "dtypes: object(1)\n",
      "memory usage: 6.1+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>activities</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>184</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     activities\n",
       "yes         195\n",
       "no          184"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['activities']].info()\n",
    "display(pd.DataFrame(stud_math.activities.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 14 пустых значений. Используя простой метод, заменим самым частым значением. В данном случае это 'yes'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>activities</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>184</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     activities\n",
       "yes         209\n",
       "no          184"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>activities</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>0.531807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>0.468193</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     activities\n",
       "yes    0.531807\n",
       "no     0.468193"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.activities = stud_math.activities.apply(lambda x: 'yes' if str(x).strip() == '' else 'yes' if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.activities.value_counts()))\n",
    "display(pd.DataFrame(stud_math.activities.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'activities':**\n",
    "\n",
    "Это строковый столбец. В колонке есть 14 незаполненных значения, мы заменили их на самое частое значение 'yes', хотя они практически равны, но все же значения 'yes' больше . Семьи распределились практически поровну на тех кто посещят доп.внеучебные занятия (53%) и кто не посещает(47%)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 20 nursery\n",
    "- посещал детский сад (yes или no). Это строковый стобец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "nursery    377 non-null object\n",
      "dtypes: object(1)\n",
      "memory usage: 6.1+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>nursery</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     nursery\n",
       "yes      300\n",
       "no        77"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['nursery']].info()\n",
    "display(pd.DataFrame(stud_math.nursery.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 16 пустых значений. Используя простой метод, заменим самым частым значением. В данном случае это 'yes'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>nursery</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     nursery\n",
       "yes      316\n",
       "no        77"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>nursery</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>0.804071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>0.195929</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      nursery\n",
       "yes  0.804071\n",
       "no   0.195929"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.nursery = stud_math.nursery.apply(lambda x: 'yes' if str(x).strip() == '' else 'yes' if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.nursery.value_counts()))\n",
    "display(pd.DataFrame(stud_math.nursery.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'nursery':**\n",
    "\n",
    "Это строковый столбец. В колонке есть 16 незаполненных значений, мы заменили их на самое частое значение 'yes' . 80% школьников посещали детский сад."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 21 higher\n",
    "- хочет получить высшее образование (yes или no). Это строковый столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "higher    374 non-null object\n",
      "dtypes: object(1)\n",
      "memory usage: 6.1+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>higher</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     higher\n",
       "yes     356\n",
       "no       18"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['higher']].info()\n",
    "display(pd.DataFrame(stud_math.higher.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Как мы видим у нас 19 пустых значений. Используя простой метод, заменим самым частым значением. В данном случае это 'yes'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>higher</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     higher\n",
       "yes     375\n",
       "no       18"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>higher</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>0.954198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>0.045802</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       higher\n",
       "yes  0.954198\n",
       "no   0.045802"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.higher = stud_math.higher.apply(lambda x: 'yes' if str(x).strip() == '' else 'yes' if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.higher.value_counts()))\n",
    "display(pd.DataFrame(stud_math.higher.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'higher':**\n",
    "\n",
    "Это строковый столбец. В колонке есть 18 незаполненных значений, мы заменили их на самое частое значение 'yes'. 95% школьников хотят получить высшее образование."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 22 internet\n",
    "- наличие интернета дома (yes или no). Это строковый столбец"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "internet    359 non-null object\n",
      "dtypes: object(1)\n",
      "memory usage: 6.1+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>internet</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>304</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     internet\n",
       "yes       304\n",
       "no         55"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['internet']].info()\n",
    "display(pd.DataFrame(stud_math.internet.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 34 пустых значений. Используя простой метод, заменим самым частым значением. В данном случае это 'yes'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>internet</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     internet\n",
       "yes       338\n",
       "no         55"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>internet</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>0.860051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>0.139949</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     internet\n",
       "yes  0.860051\n",
       "no   0.139949"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.internet = stud_math.internet.apply(lambda x: 'yes' if str(x).strip() == '' else 'yes' if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.internet.value_counts()))\n",
    "display(pd.DataFrame(stud_math.internet.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'internet':**\n",
    "\n",
    "Это строковый столбец. В колонке есть 34 незаполненных значений, мы заменили их на самое частое значение 'yes'. У 86% школьников дома есть интернет."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 23 romantic\n",
    "- в романтических отношениях (yes или no). Это строковый столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "romantic    362 non-null object\n",
      "dtypes: object(1)\n",
      "memory usage: 6.1+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>romantic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>123</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     romantic\n",
       "no        239\n",
       "yes       123"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['romantic']].info()\n",
    "display(pd.DataFrame(stud_math.romantic.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 31 пустое значений. Используя простой метод, заменим самым частым значением. В данном случае это 'no'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>romantic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>123</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     romantic\n",
       "no        270\n",
       "yes       123"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>romantic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>0.687023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>0.312977</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     romantic\n",
       "no   0.687023\n",
       "yes  0.312977"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.romantic = stud_math.romantic.apply(lambda x: 'no' if str(x).strip() == '' else 'no' if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.romantic.value_counts()))\n",
    "display(pd.DataFrame(stud_math.romantic.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'romantic':**\n",
    "\n",
    "Это строковый столбец. В колонке есть 31 незаполненное значение, мы заменили их на самое частое значение 'no'. Большинство (69%) школьников не состоят в романтических отношениях."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 24 famrel\n",
    "- семейные отношения (от 1 - очень плохо до 5 - очень хорошо). Это числовой столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "famrel    366 non-null float64\n",
      "dtypes: float64(1)\n",
      "memory usage: 6.1 KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>famrel</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5.0</td>\n",
       "      <td>97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>-1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      famrel\n",
       " 4.0     182\n",
       " 5.0      97\n",
       " 3.0      62\n",
       " 2.0      17\n",
       " 1.0       7\n",
       "-1.0       1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['famrel']].info()\n",
    "display(pd.DataFrame(stud_math.famrel.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 27 пустых значений. А также одна ошибка '-1.0'. Используя простой метод, заменим самым частым значением. В данном случае это '4.0'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>famrel</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5.0</td>\n",
       "      <td>97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     famrel\n",
       "4.0     210\n",
       "5.0      97\n",
       "3.0      62\n",
       "2.0      17\n",
       "1.0       7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>famrel</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>0.534351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5.0</td>\n",
       "      <td>0.246819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>0.157761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>0.043257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>0.017812</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       famrel\n",
       "4.0  0.534351\n",
       "5.0  0.246819\n",
       "3.0  0.157761\n",
       "2.0  0.043257\n",
       "1.0  0.017812"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.famrel = stud_math.famrel.apply(lambda x: 4.0 if str(x).strip() == '' else 4.0 if pd.isna(x)  else 4.0 if str(x).strip() == '-1.0' else x)\n",
    "display(pd.DataFrame(stud_math.famrel.value_counts()))\n",
    "display(pd.DataFrame(stud_math.famrel.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Пропуски и ошибки убрали, теперь посмотрим на его распределение."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    393.000000\n",
       "mean       3.949109\n",
       "std        0.858603\n",
       "min        1.000000\n",
       "25%        4.000000\n",
       "50%        4.000000\n",
       "75%        4.000000\n",
       "max        5.000000\n",
       "Name: famrel, dtype: float64"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.famrel.hist()\n",
    "stud_math.famrel.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'famrel':**\n",
    "\n",
    "Это числовой столбец.В колонке есть 27 пустых значений и одна ошибка, мы заменили их на самое частое значение '4.0' (от 1 - очень плохо до 5 - очень хорошо). Выбросов нет. Больше всего (53%) семей имеют по шкале отношений '4', что значит что отношения хорошие, у 2% - очень плохие."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 25 freetime\n",
    "- свободное время после школы (от 1 - очень мало до 5 - очень мого). Это числовой столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "freetime    382 non-null float64\n",
      "dtypes: float64(1)\n",
      "memory usage: 6.1 KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>freetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5.0</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     freetime\n",
       "3.0       153\n",
       "4.0       111\n",
       "2.0        63\n",
       "5.0        37\n",
       "1.0        18"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['freetime']].info()\n",
    "display(pd.DataFrame(stud_math.freetime.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 11 пустых значений.  Используя простой метод, заменим самым частым значением. В данном случае это '3.0'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>freetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5.0</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     freetime\n",
       "3.0       164\n",
       "4.0       111\n",
       "2.0        63\n",
       "5.0        37\n",
       "1.0        18"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>freetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>0.417303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>0.282443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>0.160305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5.0</td>\n",
       "      <td>0.094148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>0.045802</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     freetime\n",
       "3.0  0.417303\n",
       "4.0  0.282443\n",
       "2.0  0.160305\n",
       "5.0  0.094148\n",
       "1.0  0.045802"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.freetime = stud_math.freetime.apply(lambda x: 3.0 if str(x).strip() == '' else 3.0 if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.freetime.value_counts()))\n",
    "display(pd.DataFrame(stud_math.freetime.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Пропуски убрали, теперь посмотрим на его распределение."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    393.000000\n",
       "mean       3.218830\n",
       "std        0.978312\n",
       "min        1.000000\n",
       "25%        3.000000\n",
       "50%        3.000000\n",
       "75%        4.000000\n",
       "max        5.000000\n",
       "Name: freetime, dtype: float64"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.freetime.hist()\n",
    "stud_math.freetime.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'freetime':**\n",
    "\n",
    "Это числовой столбец. В колонке есть 11 пустых значений, мы заменили их на самое частое значение '3.0'. Выбросов нет. Большинство (42%) имеют свободное время '3' по шкале от 1 до 5. Только 9% имеют очень много свободого времени после школы, а 5% - совсем мало."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 26 goout\n",
    "- проведение времени с друзьями (от 1 - очень мало до 5 - очень много). Это числовой столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "goout    385 non-null float64\n",
      "dtypes: float64(1)\n",
      "memory usage: 6.1 KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>goout</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5.0</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     goout\n",
       "3.0    126\n",
       "2.0    101\n",
       "4.0     84\n",
       "5.0     51\n",
       "1.0     23"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['goout']].info()\n",
    "display(pd.DataFrame(stud_math.goout.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 8 пустых значений. Используя простой метод, заменим самым частым значением. В данном случае это '3.0'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>goout</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5.0</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     goout\n",
       "3.0    134\n",
       "2.0    101\n",
       "4.0     84\n",
       "5.0     51\n",
       "1.0     23"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>goout</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>0.340967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>0.256997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>0.213740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5.0</td>\n",
       "      <td>0.129771</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>0.058524</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        goout\n",
       "3.0  0.340967\n",
       "2.0  0.256997\n",
       "4.0  0.213740\n",
       "5.0  0.129771\n",
       "1.0  0.058524"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.goout = stud_math.goout.apply(lambda x: 3.0 if str(x).strip() == '' else 3.0 if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.goout.value_counts()))\n",
    "display(pd.DataFrame(stud_math.goout.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Пропуски убрали, теперь посмотрим на его распределение."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    393.000000\n",
       "mean       3.099237\n",
       "std        1.103253\n",
       "min        1.000000\n",
       "25%        2.000000\n",
       "50%        3.000000\n",
       "75%        4.000000\n",
       "max        5.000000\n",
       "Name: goout, dtype: float64"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.goout.hist()\n",
    "stud_math.goout.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'goout':**\n",
    "\n",
    "Это числовой столбец. В колонке есть 8 пустых значений, мы заменили их на самое частое значение '3.0'. Выбросов нет. Большинство (34%) проводят время с друзьями '3' по шкале от 1 до 5. 13% проводят очень много времени с друзьями, а 6% - совсем мало."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 27 health\n",
    "- текущее состояние здоровья (от 1 - очень плохо до 5 - очень хорошо). Это числовой столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "health    378 non-null float64\n",
      "dtypes: float64(1)\n",
      "memory usage: 6.1 KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>health</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>5.0</td>\n",
       "      <td>138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     health\n",
       "5.0     138\n",
       "3.0      88\n",
       "4.0      63\n",
       "1.0      46\n",
       "2.0      43"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['health']].info()\n",
    "display(pd.DataFrame(stud_math.health.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 15 пустых значений. Используя простой метод, заменим самым частым значением. В данном случае это '5.0'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>health</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>5.0</td>\n",
       "      <td>153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     health\n",
       "5.0     153\n",
       "3.0      88\n",
       "4.0      63\n",
       "1.0      46\n",
       "2.0      43"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>health</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>5.0</td>\n",
       "      <td>0.389313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>0.223919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>0.160305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>0.117048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>0.109415</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       health\n",
       "5.0  0.389313\n",
       "3.0  0.223919\n",
       "4.0  0.160305\n",
       "1.0  0.117048\n",
       "2.0  0.109415"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.health = stud_math.health.apply(lambda x: 5.0 if str(x).strip() == '' else 5.0 if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.health.value_counts()))\n",
    "display(pd.DataFrame(stud_math.health.value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Пропуски убрали, теперь посмотрим на его распределение."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    393.000000\n",
       "mean       3.595420\n",
       "std        1.394845\n",
       "min        1.000000\n",
       "25%        3.000000\n",
       "50%        4.000000\n",
       "75%        5.000000\n",
       "max        5.000000\n",
       "Name: health, dtype: float64"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.health.hist()\n",
    "stud_math.health.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'health':**\n",
    "\n",
    "Это числовой столбец. В колонке есть 15 пустых значений, мы заменили их на самое частое значение '5.0'. Выбросов нет. Большинство  учеников (39%) имеют очень хорошее здоровье. А 12% - очень плохое."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 28 absences\n",
    "- количество пропущенных занятий. Это числовой столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 393 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "absences    381 non-null float64\n",
      "dtypes: float64(1)\n",
      "memory usage: 6.1 KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>absences</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0.0</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6.0</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8.0</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10.0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12.0</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14.0</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16.0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7.0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>54.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>385.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>26.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>56.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>24.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>212.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>30.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>40.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       absences\n",
       "0.0         111\n",
       "2.0          60\n",
       "4.0          53\n",
       "6.0          31\n",
       "8.0          21\n",
       "10.0         17\n",
       "12.0         12\n",
       "14.0         12\n",
       "3.0           7\n",
       "16.0          6\n",
       "7.0           6\n",
       "5.0           5\n",
       "18.0          5\n",
       "20.0          4\n",
       "22.0          3\n",
       "9.0           3\n",
       "1.0           3\n",
       "15.0          2\n",
       "13.0          2\n",
       "11.0          2\n",
       "25.0          1\n",
       "54.0          1\n",
       "385.0         1\n",
       "26.0          1\n",
       "56.0          1\n",
       "24.0          1\n",
       "212.0         1\n",
       "21.0          1\n",
       "75.0          1\n",
       "30.0          1\n",
       "19.0          1\n",
       "38.0          1\n",
       "40.0          1\n",
       "23.0          1\n",
       "17.0          1\n",
       "28.0          1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['absences']].info()\n",
    "display(pd.DataFrame(stud_math.absences.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 12 пустых значений. Используя простой метод, заменим самым частым значением. В данном случае это '0.0'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>absences</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0.0</td>\n",
       "      <td>123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6.0</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8.0</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10.0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12.0</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14.0</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16.0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7.0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>54.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>385.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>26.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>56.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>24.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>212.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>30.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>40.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       absences\n",
       "0.0         123\n",
       "2.0          60\n",
       "4.0          53\n",
       "6.0          31\n",
       "8.0          21\n",
       "10.0         17\n",
       "12.0         12\n",
       "14.0         12\n",
       "3.0           7\n",
       "16.0          6\n",
       "7.0           6\n",
       "5.0           5\n",
       "18.0          5\n",
       "20.0          4\n",
       "22.0          3\n",
       "9.0           3\n",
       "1.0           3\n",
       "15.0          2\n",
       "13.0          2\n",
       "11.0          2\n",
       "25.0          1\n",
       "54.0          1\n",
       "385.0         1\n",
       "26.0          1\n",
       "56.0          1\n",
       "24.0          1\n",
       "212.0         1\n",
       "21.0          1\n",
       "75.0          1\n",
       "30.0          1\n",
       "19.0          1\n",
       "38.0          1\n",
       "40.0          1\n",
       "23.0          1\n",
       "17.0          1\n",
       "28.0          1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.absences = stud_math.absences.apply(lambda x: 0.0 if str(x).strip() == '' else 0.0 if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.absences.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Пропуски убрали, теперь посмотрим на его распределение."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    393.000000\n",
       "mean       7.045802\n",
       "std       23.192582\n",
       "min        0.000000\n",
       "25%        0.000000\n",
       "50%        4.000000\n",
       "75%        8.000000\n",
       "max      385.000000\n",
       "Name: absences, dtype: float64"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.absences.hist()\n",
    "stud_math.absences.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Видим, что основное распределение лежит между 0 и 75 пропущенных занятий и есть потенциальные выбросы свыше 200 (об этом нам говорит здравый смысл).\n",
    "Самый простой способ отфильтровать выбросы — воспользоваться формулой интерквартильного расстояния (межквартильного размаха). \n",
    "Выбросом считаются такие значения, которые лежат вне рамок."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25-й перцентиль: 0.0, 75-й перцентиль: 8.0, IQR: 8.0,  Границы выбросов: [-12.0, 20.0].\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "median = stud_math.absences.median()\n",
    "IQR_abs = stud_math.absences.quantile(0.75) - stud_math.absences.quantile(0.25)\n",
    "perc25_abs = stud_math.absences.quantile(0.25)\n",
    "perc75_abs = stud_math.absences.quantile(0.75)\n",
    "print('25-й перцентиль: {},'.format(perc25_abs), '75-й перцентиль: {},'.format(perc75_abs)\n",
    "      , \"IQR: {}, \".format(IQR_abs),\"Границы выбросов: [{f}, {l}].\".format(f=perc25_abs - 1.5*IQR_abs, l=perc75_abs + 1.5*IQR_abs))\n",
    "stud_math.absences.loc[stud_math.absences.between(perc25_abs - 1.5*IQR, perc75_abs + 1.5*IQR_abs)].hist(bins = 16\n",
    "                                                                                              , range = (0, 75), \n",
    "                                                                                             label = 'IQR_abs')\n",
    "stud_math.absences.loc[stud_math.absences <= 75].hist(alpha = 0.5, bins = 16, range = (0, 75),\n",
    "                                                        label = 'Здравый смысл')\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Устраним все выбросы, которые больше 75"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "stud_math = stud_math.loc[stud_math.absences <= 75]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>absences</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0.0</td>\n",
       "      <td>123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2.0</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4.0</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6.0</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8.0</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10.0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14.0</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12.0</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3.0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16.0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7.0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>54.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>26.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>56.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>30.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>40.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>24.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      absences\n",
       "0.0        123\n",
       "2.0         60\n",
       "4.0         53\n",
       "6.0         31\n",
       "8.0         21\n",
       "10.0        17\n",
       "14.0        12\n",
       "12.0        12\n",
       "3.0          7\n",
       "16.0         6\n",
       "7.0          6\n",
       "5.0          5\n",
       "18.0         5\n",
       "20.0         4\n",
       "1.0          3\n",
       "22.0         3\n",
       "9.0          3\n",
       "15.0         2\n",
       "13.0         2\n",
       "11.0         2\n",
       "54.0         1\n",
       "25.0         1\n",
       "17.0         1\n",
       "26.0         1\n",
       "56.0         1\n",
       "23.0         1\n",
       "28.0         1\n",
       "21.0         1\n",
       "75.0         1\n",
       "30.0         1\n",
       "19.0         1\n",
       "38.0         1\n",
       "40.0         1\n",
       "24.0         1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Значений, встретившихся в столбце более 10 раз: 8\n",
      "Уникальных значений: 34\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 391 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "absences    391 non-null float64\n",
      "dtypes: float64(1)\n",
      "memory usage: 6.1 KB\n"
     ]
    }
   ],
   "source": [
    "display(pd.DataFrame(stud_math.absences.value_counts()))\n",
    "print(\"Значений, встретившихся в столбце более 10 раз:\", (stud_math.absences.value_counts()>10).sum())\n",
    "print(\"Уникальных значений:\", stud_math.absences.nunique())\n",
    "stud_math.loc[:, ['absences']].info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'absences'.**\n",
    "\n",
    "Это числовой столбец. В колонке есть 12 пустых значений, мы заменили их на самое частое значение '0.0' (нет пропущенных занятий). Мы нашли и удалили два выброса (212 и 385). Значений, встретившихся в столбце более 10 раз всего 8. Большинство (123 ученика) не пропустили ни одного занятия."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "studytime, granular"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 29 score\n",
    "- баллы по госэкзамену по математике. Это числовой столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 391 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "score    385 non-null float64\n",
      "dtypes: float64(1)\n",
      "memory usage: 6.1 KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>50.0</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>55.0</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0.0</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75.0</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>65.0</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>60.0</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>40.0</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>70.0</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>45.0</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>80.0</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>30.0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>90.0</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>35.0</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25.0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>85.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>95.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>100.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       score\n",
       "50.0      54\n",
       "55.0      46\n",
       "0.0       37\n",
       "75.0      33\n",
       "65.0      31\n",
       "60.0      31\n",
       "40.0      30\n",
       "70.0      27\n",
       "45.0      26\n",
       "80.0      16\n",
       "30.0      15\n",
       "90.0      12\n",
       "35.0       8\n",
       "25.0       7\n",
       "85.0       5\n",
       "95.0       5\n",
       "100.0      1\n",
       "20.0       1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['score']].info()\n",
    "display(pd.DataFrame(stud_math.score.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 16 пустых значений. Используя простой метод, заменим самым частым значением. В данном случае это '50.0'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>50.0</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>55.0</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0.0</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75.0</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>65.0</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>60.0</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>40.0</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>70.0</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>45.0</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>80.0</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>30.0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>90.0</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>35.0</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25.0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>85.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>95.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>100.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       score\n",
       "50.0      60\n",
       "55.0      46\n",
       "0.0       37\n",
       "75.0      33\n",
       "65.0      31\n",
       "60.0      31\n",
       "40.0      30\n",
       "70.0      27\n",
       "45.0      26\n",
       "80.0      16\n",
       "30.0      15\n",
       "90.0      12\n",
       "35.0       8\n",
       "25.0       7\n",
       "85.0       5\n",
       "95.0       5\n",
       "100.0      1\n",
       "20.0       1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.score = stud_math.score.apply(lambda x: 50.0 if str(x).strip() == '' else 50.0 if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.score.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Пропуски убрали, теперь посмотрим на его распределение."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    391.000000\n",
       "mean      52.237852\n",
       "std       22.773516\n",
       "min        0.000000\n",
       "25%       42.500000\n",
       "50%       55.000000\n",
       "75%       70.000000\n",
       "max      100.000000\n",
       "Name: score, dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Значений, встретившихся в столбце более 10 раз: 12\n",
      "Уникальных значений: 18\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.score.hist()\n",
    "display(stud_math.score.describe())\n",
    "print(\"Значений, встретившихся в столбце более 10 раз:\", (stud_math.score.value_counts()>10).sum())\n",
    "print(\"Уникальных значений:\", stud_math.score.nunique())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по колонке 'score'.**\n",
    "\n",
    "Это числовой столбец. В колонке есть 16 пустых значений, мы заменили их на самое частое значение '50.0'. Выбросов нет. Распределение нормальное. Значений, встретившихся в столбце более 10 раз всего 12. Большинство (60 учеников) имею оценку '50.0', что является практически средним значением. Также есть 37 учеников, не набравших ни одного была (0.0), это говорит скорее об ошибке, чем о том, что они не смогли ничего решить. Но возможно они что-то нарушили и их результаты аннулировали. Но мы  не станем убирать эти значения."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Выясним, какие столбцы коррелируют со 'score'\n",
    "- Это поможет понять, какие параметры стоит оставить для модели, а какие — исключить. Корреляции рассмотрим только для числовых столбцов. Для быстрого построения графиков зависимости переменных можно воспользоваться функцией pairplot из модуля seaborn:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x24f77ac0d88>"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2160x2160 with 156 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#import matplotlib.pyplot as plt\n",
    "#import seaborn as sns\n",
    "#%matplotlib inline\n",
    "sns.pairplot(stud_math, kind = 'reg')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Используем для наглядности матрицу корреляций:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>Medu</th>\n",
       "      <th>Fedu</th>\n",
       "      <th>traveltime</th>\n",
       "      <th>studytime</th>\n",
       "      <th>studytime, granular</th>\n",
       "      <th>famrel</th>\n",
       "      <th>freetime</th>\n",
       "      <th>goout</th>\n",
       "      <th>health</th>\n",
       "      <th>absences</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>age</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.153451</td>\n",
       "      <td>-0.124718</td>\n",
       "      <td>0.104560</td>\n",
       "      <td>0.009275</td>\n",
       "      <td>-0.009281</td>\n",
       "      <td>0.028586</td>\n",
       "      <td>-0.010429</td>\n",
       "      <td>0.115145</td>\n",
       "      <td>-0.041905</td>\n",
       "      <td>0.154310</td>\n",
       "      <td>-0.146115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Medu</td>\n",
       "      <td>-0.153451</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.592934</td>\n",
       "      <td>-0.169624</td>\n",
       "      <td>0.069631</td>\n",
       "      <td>-0.070143</td>\n",
       "      <td>-0.017541</td>\n",
       "      <td>0.039506</td>\n",
       "      <td>0.059995</td>\n",
       "      <td>-0.067992</td>\n",
       "      <td>0.096272</td>\n",
       "      <td>0.201007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Fedu</td>\n",
       "      <td>-0.124718</td>\n",
       "      <td>0.592934</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.137418</td>\n",
       "      <td>-0.006675</td>\n",
       "      <td>0.006790</td>\n",
       "      <td>-0.021890</td>\n",
       "      <td>-0.012474</td>\n",
       "      <td>0.053820</td>\n",
       "      <td>-0.018731</td>\n",
       "      <td>0.031960</td>\n",
       "      <td>0.117712</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>traveltime</td>\n",
       "      <td>0.104560</td>\n",
       "      <td>-0.169624</td>\n",
       "      <td>-0.137418</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.099185</td>\n",
       "      <td>0.100351</td>\n",
       "      <td>-0.022847</td>\n",
       "      <td>-0.006126</td>\n",
       "      <td>0.053179</td>\n",
       "      <td>-0.048344</td>\n",
       "      <td>0.007343</td>\n",
       "      <td>-0.057114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>studytime</td>\n",
       "      <td>0.009275</td>\n",
       "      <td>0.069631</td>\n",
       "      <td>-0.006675</td>\n",
       "      <td>-0.099185</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0.035332</td>\n",
       "      <td>-0.112034</td>\n",
       "      <td>-0.046699</td>\n",
       "      <td>-0.072730</td>\n",
       "      <td>-0.060570</td>\n",
       "      <td>0.110763</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>studytime, granular</td>\n",
       "      <td>-0.009281</td>\n",
       "      <td>-0.070143</td>\n",
       "      <td>0.006790</td>\n",
       "      <td>0.100351</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.035871</td>\n",
       "      <td>0.113683</td>\n",
       "      <td>0.047128</td>\n",
       "      <td>0.073314</td>\n",
       "      <td>0.060905</td>\n",
       "      <td>-0.112301</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>famrel</td>\n",
       "      <td>0.028586</td>\n",
       "      <td>-0.017541</td>\n",
       "      <td>-0.021890</td>\n",
       "      <td>-0.022847</td>\n",
       "      <td>0.035332</td>\n",
       "      <td>-0.035871</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.144841</td>\n",
       "      <td>0.049008</td>\n",
       "      <td>0.106000</td>\n",
       "      <td>-0.032732</td>\n",
       "      <td>0.062336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>freetime</td>\n",
       "      <td>-0.010429</td>\n",
       "      <td>0.039506</td>\n",
       "      <td>-0.012474</td>\n",
       "      <td>-0.006126</td>\n",
       "      <td>-0.112034</td>\n",
       "      <td>0.113683</td>\n",
       "      <td>0.144841</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.289781</td>\n",
       "      <td>0.069387</td>\n",
       "      <td>-0.074450</td>\n",
       "      <td>0.023867</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>goout</td>\n",
       "      <td>0.115145</td>\n",
       "      <td>0.059995</td>\n",
       "      <td>0.053820</td>\n",
       "      <td>0.053179</td>\n",
       "      <td>-0.046699</td>\n",
       "      <td>0.047128</td>\n",
       "      <td>0.049008</td>\n",
       "      <td>0.289781</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.008064</td>\n",
       "      <td>0.019107</td>\n",
       "      <td>-0.119706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>health</td>\n",
       "      <td>-0.041905</td>\n",
       "      <td>-0.067992</td>\n",
       "      <td>-0.018731</td>\n",
       "      <td>-0.048344</td>\n",
       "      <td>-0.072730</td>\n",
       "      <td>0.073314</td>\n",
       "      <td>0.106000</td>\n",
       "      <td>0.069387</td>\n",
       "      <td>-0.008064</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.022007</td>\n",
       "      <td>-0.082669</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>absences</td>\n",
       "      <td>0.154310</td>\n",
       "      <td>0.096272</td>\n",
       "      <td>0.031960</td>\n",
       "      <td>0.007343</td>\n",
       "      <td>-0.060570</td>\n",
       "      <td>0.060905</td>\n",
       "      <td>-0.032732</td>\n",
       "      <td>-0.074450</td>\n",
       "      <td>0.019107</td>\n",
       "      <td>-0.022007</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.025519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>score</td>\n",
       "      <td>-0.146115</td>\n",
       "      <td>0.201007</td>\n",
       "      <td>0.117712</td>\n",
       "      <td>-0.057114</td>\n",
       "      <td>0.110763</td>\n",
       "      <td>-0.112301</td>\n",
       "      <td>0.062336</td>\n",
       "      <td>0.023867</td>\n",
       "      <td>-0.119706</td>\n",
       "      <td>-0.082669</td>\n",
       "      <td>0.025519</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          age      Medu      Fedu  traveltime  studytime  \\\n",
       "age                  1.000000 -0.153451 -0.124718    0.104560   0.009275   \n",
       "Medu                -0.153451  1.000000  0.592934   -0.169624   0.069631   \n",
       "Fedu                -0.124718  0.592934  1.000000   -0.137418  -0.006675   \n",
       "traveltime           0.104560 -0.169624 -0.137418    1.000000  -0.099185   \n",
       "studytime            0.009275  0.069631 -0.006675   -0.099185   1.000000   \n",
       "studytime, granular -0.009281 -0.070143  0.006790    0.100351  -1.000000   \n",
       "famrel               0.028586 -0.017541 -0.021890   -0.022847   0.035332   \n",
       "freetime            -0.010429  0.039506 -0.012474   -0.006126  -0.112034   \n",
       "goout                0.115145  0.059995  0.053820    0.053179  -0.046699   \n",
       "health              -0.041905 -0.067992 -0.018731   -0.048344  -0.072730   \n",
       "absences             0.154310  0.096272  0.031960    0.007343  -0.060570   \n",
       "score               -0.146115  0.201007  0.117712   -0.057114   0.110763   \n",
       "\n",
       "                     studytime, granular    famrel  freetime     goout  \\\n",
       "age                            -0.009281  0.028586 -0.010429  0.115145   \n",
       "Medu                           -0.070143 -0.017541  0.039506  0.059995   \n",
       "Fedu                            0.006790 -0.021890 -0.012474  0.053820   \n",
       "traveltime                      0.100351 -0.022847 -0.006126  0.053179   \n",
       "studytime                      -1.000000  0.035332 -0.112034 -0.046699   \n",
       "studytime, granular             1.000000 -0.035871  0.113683  0.047128   \n",
       "famrel                         -0.035871  1.000000  0.144841  0.049008   \n",
       "freetime                        0.113683  0.144841  1.000000  0.289781   \n",
       "goout                           0.047128  0.049008  0.289781  1.000000   \n",
       "health                          0.073314  0.106000  0.069387 -0.008064   \n",
       "absences                        0.060905 -0.032732 -0.074450  0.019107   \n",
       "score                          -0.112301  0.062336  0.023867 -0.119706   \n",
       "\n",
       "                       health  absences     score  \n",
       "age                 -0.041905  0.154310 -0.146115  \n",
       "Medu                -0.067992  0.096272  0.201007  \n",
       "Fedu                -0.018731  0.031960  0.117712  \n",
       "traveltime          -0.048344  0.007343 -0.057114  \n",
       "studytime           -0.072730 -0.060570  0.110763  \n",
       "studytime, granular  0.073314  0.060905 -0.112301  \n",
       "famrel               0.106000 -0.032732  0.062336  \n",
       "freetime             0.069387 -0.074450  0.023867  \n",
       "goout               -0.008064  0.019107 -0.119706  \n",
       "health               1.000000 -0.022007 -0.082669  \n",
       "absences            -0.022007  1.000000  0.025519  \n",
       "score               -0.082669  0.025519  1.000000  "
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stud_math.corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по матрице:**\n",
    "\n",
    "Существуют обычные стандарты матрицы корреляции:\n",
    "\n",
    "+1     - это строгая прямая связь\n",
    "+0.50  - это слабая прямая связь\n",
    " 0.00  - нет связи\n",
    "-0.50  - это слабая обратная связь\n",
    "-1.00  - это строгая обратная связь\n",
    "\n",
    "По нашей матрице получилось, что значения больше 0.1 ии меньше -0.1 будут являться значительной корреляцией, а значение 0.2 -сильной:\n",
    "\n",
    "**Положительная:**\n",
    "\n",
    "Medu      0.20 - сильная корреляция\n",
    "Fedu      0.12 - значительная корреляция\n",
    "studytime 0.11 - значительная корреляция\n",
    "famrel    0.06 - практически нет связи\n",
    "freetime  0.02 - практически нет связи\n",
    "absences  0.03 - практически нет связи\n",
    "\n",
    "**Отрицательная:**\n",
    "\n",
    "age                 -0.15 - значительная корреляция\n",
    "traveltime          -0.06 - практически нет связи\n",
    "studytime, granular -0.11 - значительная корреляция\n",
    "goout               -0.12 - значительная корреляция\n",
    "health              -0.08 - практически нет связи\n",
    "\n",
    "**Итого:**\n",
    "\n",
    "Мы обнаружили новую переменную, по которой не делали разбор \"studytime, granular\". \n",
    "Заменим название, на более удобное, состоящее из одного слова \"granular\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['school', 'sex', 'age', 'address', 'famsize', 'Pstatus', 'Medu', 'Fedu',\n",
       "       'Mjob', 'Fjob', 'reason', 'guardian', 'traveltime', 'studytime',\n",
       "       'schoolsup', 'famsup', 'paid', 'activities', 'nursery', 'granular',\n",
       "       'higher', 'internet', 'romantic', 'famrel', 'freetime', 'goout',\n",
       "       'health', 'absences', 'score'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stud_math=stud_math.rename(columns={'studytime, granular': 'granular'})\n",
    "stud_math.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проанализируем данный столбец:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 30 granular\n",
    "- Это числовой столбец, тесно связанный с 'studytime'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 391 entries, 0 to 394\n",
      "Data columns (total 1 columns):\n",
      "granular    384 non-null float64\n",
      "dtypes: float64(1)\n",
      "memory usage: 6.1 KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>granular</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>-6.0</td>\n",
       "      <td>192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>-3.0</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>-9.0</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>-12.0</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       granular\n",
       "-6.0        192\n",
       "-3.0        101\n",
       "-9.0         64\n",
       "-12.0        27"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.loc[:, ['granular']].info()\n",
    "display(pd.DataFrame(stud_math.granular.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим у нас 7 пустых значений. Используя простой метод, заменим самым частым значением. В данном случае это '-6.0'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>granular</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>-6.0</td>\n",
       "      <td>199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>-3.0</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>-9.0</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>-12.0</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       granular\n",
       "-6.0        199\n",
       "-3.0        101\n",
       "-9.0         64\n",
       "-12.0        27"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.granular = stud_math.granular.apply(lambda x: -6.0 if str(x).strip() == '' else -6.0 if pd.isna(x)  else x )\n",
    "display(pd.DataFrame(stud_math.granular.value_counts()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Пропуски убрали, теперь посмотрим на его распределение."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    391.000000\n",
       "mean      -6.130435\n",
       "std        2.506580\n",
       "min      -12.000000\n",
       "25%       -6.000000\n",
       "50%       -6.000000\n",
       "75%       -3.000000\n",
       "max       -3.000000\n",
       "Name: granular, dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stud_math.granular.hist()\n",
    "display(stud_math.granular.describe())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по столбцу 'granular':**\n",
    "\n",
    "Это числовой столбец. В колонке есть 7 пустых значений, мы заменили их на самое частое значение '-6.0'. Выбросов нет. Распределение нормальное. Т.к. по матрице корреляций у них строгая обратная связь (-1.0), то это значит что количество времени потряченное на учебу напрямую влияет на 'granular'.\n",
    "\n",
    "**Посмотрим распределение по 'studytime' (1 - <2 часов, 2 - 2-5 часов, 3 - 5-10 часов, 4 - >10 часов) :**\n",
    "\n",
    "mean       2.043257\n",
    "std        0.833398\n",
    "min        1.000000\n",
    "25%        1.000000\n",
    "50%        2.000000\n",
    "75%        2.000000\n",
    "max        4.00000\n",
    "\n",
    "**Посмотрим распределение по 'granular':**\n",
    "\n",
    "mean      -6.130435\n",
    "std        2.506580\n",
    "min      -12.000000\n",
    "25%       -6.000000\n",
    "50%       -6.000000\n",
    "75%       -3.000000\n",
    "max       -3.000000\n",
    "\n",
    "Из этих данных видно, что если ученик тратит менее 2х часов на учебу, то показатель 'granular' все больше уходит в минус (в данном случае это -12) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выводы по матрице:**\n",
    "\n",
    "Для дальнейшей работы оставим:\n",
    "\n",
    "Medu, Fedu, studytime, age, granular, goout.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Проанализируем номинативные переменные:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0MAAAEaCAYAAADT3oz5AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAY/klEQVR4nO3de7Ded10n8PeHpC0t0BsNtU0bWkyhAosKWaXish2LXIqY4qLAohaW2sHBEC+rIKvgzgjaFYTSdcEKaBVFSpVthS5MqSDjOLCmBYXaYs9UeklDCfR+oaXls388T2ZDPLGnIc/5PSe/12smc57f7XneSS8n7/P9/r6/6u4AAACMzcOGDgAAADAEZQgAABglZQgAABglZQgAABglZQgAABglZQgAABglZQiAuVNVf1RVv7kX3+83q+qrVfXlvfWeAKx8yhAAu1VVX6qqe6rqzqq6pao+UlXHDp1rZ1XVVbX+3zh+bJJfSvLE7v6O5UsGwLxThgB4MC/o7kcmOSrJTUnOGTjPQ/XYJF/r7q881AuravUM8gAwJ5QhAJaku7+e5IIkT9yxr6oOqao/rqrtVXVtVf1aVT1seuydVXXBTueeVVWX1sTJVXVDVb1+On3tS1X1st19dlX9TFUtVNXNVXVRVR093f+p6Sn/MB29evEu1z0rySVJjp4e/6Pp/h+tqiuq6taq+mRVfddO13ypql5bVf+Y5K5dC9E0/9uq6itVdVtV/WNVPXl67ICqektVXVdVN1XVu6rqwOmx11bVp3e8X1X97DTDwx/iPwoA9hJlCIAlqaqDkrw4yad32n1OkkOSPC7Jf0zy00leMT32S0meUlUvr6r/kOSVSU7v7p4e/44kRyRZm+T0JOdW1RMW+dwfSvJbSX4ik9Gpa5P8eZJ09zOnp313dz+yuz+w87Xd/fEkz0ty4/T4y6vq8Unen+Tnk6xJcnGSv6qq/Xe69KVJnp/k0O6+f5dIz07yzCSPT3Lo9M/ka9NjZ033f0+S9dPf2xumx34nyX1Jfq2qTkjy5iQ/OS2ZAAxAGQLgwfzvqro1ye1JfjiTv9SnqlZlUgR+tbvv6O4vJXlrkp9Kku6+O8lPJvndJO9Lsqm7b9jlvX+9u+/t7r9J8pFMCs+uXpbkvd19eXffm+RXk5xUVcft4e/nxUk+0t2XdPc3krwlyYFJfmCnc97R3dd39z2LXP+NJI9KcmKS6u4ru3tbVVWSn0nyC919c3ffkUnheUmSdPc3MymLr0lyUZL/0d2f3cPfAwB7gTIEwIM5rbsPTXJAkp9L8jdVtWNUZ/9MRmp2uDaT0ZAkSXf/3yTXJKkk5+/yvrd09127XHv0Ip9/9M6f0d13ZjISs3aRc5di1/f7ZpLrd3m/63d3cXf/dZL/meT3ktxUVedW1cGZjDIdlOSy6fS7W5N8dLp/x7VfSvKJJMdNrwdgQMoQAEvS3Q90918meSDJDyb5aiajJI/d6bR1Sbbu2KiqV2dSom5M8iu7vOVhVfWIXa69cZGPvnHnz5he8+idP+ch2vX9Ksmxu7xf73rRzrr7Hd39tCRPymRa3C9n8udxT5Indfeh01+HTBef2PFZpyY5KcmlmY6wATAcZQiAJZkuHLAxyWFJruzuBzIZ7XlTVT2qqh6b5BczmRKX6b05v5nJVLmfSvIrVfU9u7ztf6+q/af3FP1Ikg8u8tF/luQVVfU9VXVAJlPPPjMdZUkmK9w97iH8Vs5P8vyqOqWq9svk3qZ7k/zdUi6uqn9fVd8/vfauJF9P8sB0hOkPkrytqh4zPXdtVT1n+vqIJO9JckYm90i9YFqOABiIMgTAg/mrqrozk3uG3pTJIghXTI9tyqQQXJPkbzMpLu+drpj2viRndfc/dPfVSV6f5E+mhSZJvpzklkxGav40yau6+6pdP7y7L03y60n+Ism2JN+Z6X04U7+R5Lzp1LTF7jna9f2+mElBOyeT0ZwXZLJ8+H1L/PM4OJPSc0sm0+2+lsl9R0ny2iQLST5dVbcn+XiSHYtCnJvkwu6+uLu/lsmCEu+uqkcv8XMB2Mvq/y/qAwDLo6pOTvK+7j5m6CwAjJeRIQAAYJSUIQAAYJRMkwMAAEbJyBAAADBKyhAAADBKq4cO8O044ogj+rjjjhs6BgAAMKcuu+yyr3b3msWOregydNxxx2XLli1DxwAAAOZUVV27u2OmyQEAAKOkDAEAAKOkDAEAAKOkDAEAAKM0szJUVe+tqq9U1Rd22nd4VV1SVVdPvx423V9V9Y6qWqiqf6yqp84qFwAAQDLbkaE/SvLcXfa9Lsml3X1Ckkun20nyvCQnTH+dmeSdM8wFAAAwuzLU3Z9KcvMuuzcmOW/6+rwkp+20/4974tNJDq2qo2aVDQAAYLmfM3Rkd29Lku7eVlWPme5fm+T6nc67Ybpv2zLnAwDmyDnnnJOFhYWhY6w4W7duTZKsXbt24CQrz/r167Np06ahY7BM5uWhq7XIvl70xKozM5lKl3Xr1s0yEwDAinTPPfcMHQFWhOUuQzdV1VHTUaGjknxluv+GJMfudN4xSW5c7A26+9wk5ybJhg0bFi1MAMC+wU/o98zmzZuTJGefffbASWC+LffS2hclOX36+vQkF+60/6enq8o9PcltO6bTAQAAzMLMRoaq6v1JTk5yRFXdkOSNSX47yflV9cok1yX58enpFyc5NclCkruTvGJWuQAAAJIZlqHufuluDp2yyLmd5NWzygIAALCr5Z4mBwAAMBeUIQAAYJSUIQAAYJSUIQAAYJTm5aGr4Cnje8hTxvecp4wDwLgpQ7DCeco4AMCeUYaYG35Cv2c8ZRwAYM+4ZwgAABglZQgAABglZQgAABglZQgAABglZQgAABglZQgAABglZQgAABglZQgAABglZQgAABglZQgAABglZQgAABglZQgAABglZQgAABglZQgAABglZQgAABglZQgAABglZQgAABglZQgAABglZQgAABglZQgAABglZQgAABglZQgAABglZQgAABglZQgAABilQcpQVf1CVV1RVV+oqvdX1cOr6viq+kxVXV1VH6iq/YfIBgAAjMOyl6GqWpvkNUk2dPeTk6xK8pIkZyV5W3efkOSWJK9c7mwAAMB4DDVNbnWSA6tqdZKDkmxL8kNJLpgePy/JaQNlAwAARmDZy1B3b03yliTXZVKCbktyWZJbu/v+6Wk3JFm73NkAAIDxGGKa3GFJNiY5PsnRSR6R5HmLnNq7uf7MqtpSVVu2b98+u6AAAMA+bYhpcs9K8i/dvb27v5HkL5P8QJJDp9PmkuSYJDcudnF3n9vdG7p7w5o1a5YnMQAAsM8Zogxdl+TpVXVQVVWSU5L8U5JPJHnR9JzTk1w4QDYAAGAkhrhn6DOZLJRweZLPTzOcm+S1SX6xqhaSPDrJe5Y7GwAAMB6rH/yUva+735jkjbvsvibJ9w0QBwAAGKGhltYGAAAYlDIEAACMkjIEAACMkjIEAACMkjIEAACMkjIEAACMkjIEAACMkjIEAACMkjIEAACMkjIEAACMkjIEAACMkjIEAACMkjIEAACM0uqhAwDAGJxzzjlZWFgYOgYjsePftc2bNw+chLFYv359Nm3aNHSMh0wZAoBlsLCwkKuv+GzWPfKBoaMwAvt/YzL5595rtwychDG47s5VQ0fYY8oQACyTdY98IK9/6u1DxwDYq958+cFDR9hj7hkCAABGSRkCAABGSRkCAABGSRkCAABGSRkCAABGSRkCAABGSRkCAABGyXOGZsBTxllOnjLOEFbqk8YBYGfK0AwsLCzkc1+4Mg8cdPjQURiBh93XSZLLrrlp4CSMxaq7bx46AgDsFcrQjDxw0OG558RTh44BsNcdeNXFQ0cAgL3CPUMAAMAoKUMAAMAoKUMAAMAoKUMAAMAoDVKGqurQqrqgqq6qqiur6qSqOryqLqmqq6dfDxsiGwAAMA5DjQydneSj3X1iku9OcmWS1yW5tLtPSHLpdBsAAGAmlr0MVdXBSZ6Z5D1J0t33dfetSTYmOW962nlJTlvubAAAwHgMMTL0uCTbk/xhVX22qt5dVY9IcmR3b0uS6dfHDJANAAAYiSHK0OokT03yzu7+3iR35SFMiauqM6tqS1Vt2b59+6wyAgAA+7ghytANSW7o7s9Mty/IpBzdVFVHJcn061cWu7i7z+3uDd29Yc2aNcsSGAAA2Pcsexnq7i8nub6qnjDddUqSf0pyUZLTp/tOT3LhcmcDAADGY/VAn7spyZ9W1f5JrknyikyK2flV9cok1yX58YGyAQAAIzBIGeruzyXZsMihU5Y7CwAAME5DPWcIAABgUMoQAAAwSsoQAAAwSksuQ1X1g1X1iunrNVV1/OxiAQAAzNaSFlCoqjdmsuDBE5L8YZL9krwvyTNmFw0A9h1bt27NXXesypsvP3joKAB71bV3rMojtm4dOsYeWerI0AuT/GiSu5Kku29M8qhZhQIAAJi1pS6tfV93d1V1klTVI2aYCQD2OWvXrs2992/L6596+9BRAPaqN19+cA5Yu3boGHtkqSND51fV7yc5tKp+JsnHk/zB7GIBAADM1pJGhrr7LVX1w0luz+S+oTd09yUzTQYAADBDD1qGqmpVko9197OSKEAAAMA+4UGnyXX3A0nurqpDliEPAADAsljqAgpfT/L5qrok0xXlkqS7XzOTVAAAADO21DL0kekvAACAfcJSF1A4r6r2T/L46a4vdvc3ZhcLAABgtpZUhqrq5CTnJflSkkpybFWd3t2fml20lWvr1q1ZdfdtOfCqi4eOArDXrbr7a9m69f6hYwDAt22p0+TemuTZ3f3FJKmqxyd5f5KnzSoYAADALC21DO23owglSXf/c1XtN6NMK97atWvz5XtX554TTx06CsBed+BVF2ft2iOHjgEA37allqEtVfWeJH8y3X5ZkstmEwkAAGD2llqGfjbJq5O8JpN7hj6V5H/NKhQAAMCsLbUMrU5ydnf/bpJU1aokB8wsFQAAwIw9bInnXZrkwJ22D0zy8b0fBwAAYHkstQw9vLvv3LExfX3QbCIBAADM3lLL0F1V9dQdG1W1Ick9s4kEAAAwe0u9Z2hzkg9W1Y1JOsnRSV48s1QAAAAzttQydHyS702yLskLkzw9k1IEACzRdXeuypsvP3joGIzATXdPJv8cedA3B07CGFx356qcMHSIPbTUMvTr3f3Bqjo0yQ8neWuSdyb5/pklA4B9yPr164eOwIjct7CQJDngsf69Y/ZOyMr9f9xSy9AD06/PT/Ku7r6wqn5jNpEAYN+zadOmoSMwIps3b06SnH322QMngfm21AUUtlbV7yf5iSQXV9UBD+FaAACAubPUQvMTST6W5LndfWuSw5P88sxSAQAAzNiSpsl1991J/nKn7W1Jts0qFAAAwKyZ6gYAAIzSYGWoqlZV1Wer6sPT7eOr6jNVdXVVfaCq9h8qGwAAsO8bcmRoc5Ird9o+K8nbuvuEJLckeeUgqQAAgFEYpAxV1TGZLNP97ul2JfmhJBdMTzkvyWlDZAMAAMZhqc8Z2tvenuRXkjxquv3oJLd29/3T7RuSrB0i2N6y6u6bc+BVFw8dgxF42NdvT5J88+Geas/yWHX3zUmOHDoGAHzblr0MVdWPJPlKd19WVSfv2L3Iqb2b689McmaSrFu3biYZv10r9Qm8rEwLC3ckSdY/zl9OWS5H+v8cAPuEIUaGnpHkR6vq1CQPT3JwJiNFh1bV6uno0DFJblzs4u4+N8m5SbJhw4ZFC9PQPGWc5eQp4wAAe2bZ7xnq7l/t7mO6+7gkL0ny1939siSfSPKi6WmnJ7lwubMBAADjMU/PGXptkl+sqoVM7iF6z8B5AACAfdhQCygkSbr7k0k+OX19TZLvGzIPAAAwHvM0MgQAALBslCEAAGCUlCEAAGCUlCEAAGCUlCEAAGCUlCEAAGCUlCEAAGCUlCEAAGCUlCEAAGCUlCEAAGCUlCEAAGCUlCEAAGCUlCEAAGCUlCEAAGCUlCEAAGCUlCEAAGCUlCEAAGCUlCEAAGCUlCEAAGCUlCEAAGCUlCEAAGCUlCEAAGCUlCEAAGCUVg8dAABgd84555wsLCwMHWPF2fFntnnz5oGTrDzr16/Ppk2bho7BMlGGAAD2MQceeODQEWBFUIYAgLnlJ/TALLlnCAAAGCVlCAAAGCVlCAAAGCVlCAAAGKVlL0NVdWxVfaKqrqyqK6pq83T/4VV1SVVdPf162HJnAwAAxmOIkaH7k/xSd39XkqcneXVVPTHJ65Jc2t0nJLl0ug0AADATy16Guntbd18+fX1HkiuTrE2yMcl509POS3LacmcDAADGY9DnDFXVcUm+N8lnkhzZ3duSSWGqqscMGI0BeMr4nvGU8T3nKeMAMG6DlaGqemSSv0jy8919e1Ut9bozk5yZJOvWrZtdQFghPGUcAGDPVHcv/4dW7Zfkw0k+1t2/O933xSQnT0eFjkryye5+wr/1Phs2bOgtW7bMPjAAALAiVdVl3b1hsWNDrCZXSd6T5ModRWjqoiSnT1+fnuTC5c4GAACMxxDT5J6R5KeSfL6qPjfd9/okv53k/Kp6ZZLrkvz4ANkAAICRWPYy1N1/m2R3NwidspxZAACA8RriOUMAAACDU4YAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRUoYAAIBRmqsyVFXPraovVtVCVb1u6DywEmzcuDEnn3xyXvjCFw4dBYA5ccYZZ+Tkk0/Oq171qqGjwFybmzJUVauS/F6S5yV5YpKXVtUTh00F8++2225Lktxyyy0DJwFgXiwsLCRJrrrqqoGTwHybmzKU5PuSLHT3Nd19X5I/T7Jx4Eww1zZu/Nb/RIwOAXDGGWd8y7bRIdi9eSpDa5Ncv9P2DdN9wG7sGBXawegQADtGhXYwOgS7N09lqBbZ1//qpKozq2pLVW3Zvn37MsQCAAD2RfNUhm5IcuxO28ckuXHXk7r73O7e0N0b1qxZs2zhAACAfcs8laG/T3JCVR1fVfsneUmSiwbOBHPtkEMO+Zbtww47bKAkAMyL9evXf8v2iSeeOFASmH9zU4a6+/4kP5fkY0muTHJ+d18xbCqYbxdeeOG3bH/oQx8aKAkA8+Ld7373t2y/613vGigJzL+5KUNJ0t0Xd/fju/s7u/tNQ+eBlWDH6JBRIQB22DE6ZFQI/m3V/a/WKFgxNmzY0Fu2bBk6BgAAMKeq6rLu3rDYsbkaGQIAAFguyhAAADBKyhAAADBKyhAAADBKK3oBharanuTaoXPAHDgiyVeHDgHAXPG9ASYe291rFjuwossQMFFVW3a3SgoA4+R7Azw40+QAAIBRUoYAAIBRUoZg33Du0AEAmDu+N8CDcM8QAAAwSkaGAACAUVKGYIWqqu8YOgMA86eqDhs6A6wUyhCsQFX1/CQXVdWia+YDME5V9ewkl0y/Ag9CGYIVpqqem+R1Sd7Q3durar+hMwEwN56Q5MlJ/mtVnTZ0GJh3q4cOACxdVR2e5OIkP9bdH62q70zyhqr6hSS3tBVRAMbu/Ukel+S6JD9dVft19wcHzgRzy8gQrCDdfXOSF2RSgJ6SybKpn+3umxUhgHGqqqdMvyckyc1J7kvypCTvTPKTVfWfBgsHc04ZghWmuz+S5PVJPpfkku5+e1U9rKpq4GgALLOqenQm3w8+XFUvSvK0JP8tyb2Z/D3vzzIZIXrpcClhfilDsAJ190eTPCfJy6vqkO7+ZpJVA8cCYJl199eSPCvJMUmekuS5Sf44yd1J1nT3B5J8KMnGqnrUYEFhTnnoKqxgVfW8JG9PctJ0Ch0AI1RVpyR5b5KnJnlRkv+c5IYkr0hyQJJ09x2DBYQ5pQzBCldVG5O8McmGJO3eIYBxqqpTk5yVyQ/I7qyq47v7X4bOBfNMGYJ9QFU9srvvHDoHAMOaFqK3JnnGjhkDVVV+UAaLs7Q27AMUIQCSpLsvnj5/7uNVZcYAPAgjQwAA+xgzBmBplCEAAGCULK0NAACMkjIEAACMkjIEAACMkjIEAACMkjIEAACMkjIEAACMkjIEwIpSVY+oqo9U1T9U1Req6sVV9bSq+puquqyqPlZVR1XV6qr6+6o6eXrdb1XVmwaOD8AcWT10AAB4iJ6b5Mbufn6SVNUhSf5Pko3dvb2qXpzkTd39X6rq5UkuqKrXTK/7/qFCAzB/lCEAVprPJ3lLVZ2V5MNJbkny5CSXVFWSrEqyLUm6+4qq+pMkf5XkpO6+b5jIAMwjZQiAFaW7/7mqnpbk1CS/leSSJFd090m7ueTfJbk1yZHLFBGAFcI9QwCsKFV1dJK7u/t9Sd6SydS3NVV10vT4flX1pOnrH0vy6CTPTPKOqjp0oNgAzKHq7qEzAMCSVdVzkvxOkm8m+UaSn01yf5J3JDkkk1kPb0/yoSR/l+SU7r5+et/Q07r79EGCAzB3lCEAAGCUTJMDAABGSRkCAABGSRkCAABGSRkCAABGSRkCAABGSRkCAABGSRkCAABGSRkCAABG6f8BmUDNXTfNq1wAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1008x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1008x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def get_boxplot(column):\n",
    "    fig, ax = plt.subplots(figsize = (14, 4))\n",
    "    sns.boxplot(x=column, y='score', \n",
    "                data=stud_math.loc[stud_math.loc[:, column].isin(stud_math.loc[:, column].value_counts().index[:])],\n",
    "               ax=ax)\n",
    "    plt.xticks(rotation=45)\n",
    "    ax.set_title('Boxplot for ' + column)\n",
    "    plt.show()\n",
    "for col in ['school', 'sex', 'address', 'famsize', 'Pstatus', 'Mjob', 'Fjob', 'reason', 'guardian', 'schoolsup', 'famsup', 'paid', 'activities', 'nursery', 'higher', 'internet', 'romantic']:\n",
    "    get_boxplot(col)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проверим, есть ли статистическая разница в распределении оценок по номинативным признакам, с помощью теста Стьюдента. \n",
    "Проверим нулевую гипотезу о том, что распределения баллов по госэкзамену по математике по различным параметрам неразличимы:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Найдены статистически значимые различия для колонки sex\n",
      "Найдены статистически значимые различия для колонки address\n",
      "Найдены статистически значимые различия для колонки Mjob\n",
      "Найдены статистически значимые различия для колонки higher\n",
      "Найдены статистически значимые различия для колонки romantic\n"
     ]
    }
   ],
   "source": [
    "def get_stat_dif(column):\n",
    "    cols = stud_math.loc[:, column].value_counts().index[:10]\n",
    "    combinations_all = list(combinations(cols, 2))\n",
    "    for comb in combinations_all:\n",
    "        if ttest_ind(stud_math.loc[stud_math.loc[:, column] == comb[0], 'score'], \n",
    "                        stud_math.loc[stud_math.loc[:, column] == comb[1], 'score']).pvalue \\\n",
    "            <= 0.05/len(combinations_all): # Учли поправку Бонферони\n",
    "            print('Найдены статистически значимые различия для колонки', column)\n",
    "            break\n",
    "for col in ['school', 'sex', 'address', 'famsize', 'Pstatus', 'Mjob', 'Fjob', 'reason', 'guardian', 'schoolsup', 'famsup', 'paid', 'activities', 'nursery', 'higher', 'internet', 'romantic']:\n",
    "    get_stat_dif(col)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Итак, в нашем случае важные переменные, которые, возможно, оказывают влияние на оценку, это: \n",
    "Medu, Fedu, studytime, age, granular, goout, sex, address, Mjob, higher, romantic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Medu</th>\n",
       "      <th>Fedu</th>\n",
       "      <th>studytime</th>\n",
       "      <th>age</th>\n",
       "      <th>granular</th>\n",
       "      <th>goout</th>\n",
       "      <th>sex</th>\n",
       "      <th>address</th>\n",
       "      <th>Mjob</th>\n",
       "      <th>higher</th>\n",
       "      <th>romantic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>18</td>\n",
       "      <td>-6.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>at_home</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>17</td>\n",
       "      <td>-6.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>at_home</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>15</td>\n",
       "      <td>-6.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>at_home</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>15</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>health</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>16</td>\n",
       "      <td>-6.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>F</td>\n",
       "      <td>U</td>\n",
       "      <td>other</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Medu  Fedu  studytime  age  granular  goout sex address     Mjob higher  \\\n",
       "0   4.0   4.0        2.0   18      -6.0    4.0   F       U  at_home    yes   \n",
       "1   1.0   1.0        2.0   17      -6.0    3.0   F       U  at_home    yes   \n",
       "2   1.0   1.0        2.0   15      -6.0    2.0   F       U  at_home    yes   \n",
       "3   4.0   2.0        3.0   15      -9.0    2.0   F       U   health    yes   \n",
       "4   3.0   3.0        2.0   16      -6.0    2.0   F       U    other    yes   \n",
       "\n",
       "  romantic  \n",
       "0       no  \n",
       "1       no  \n",
       "2       no  \n",
       "3      yes  \n",
       "4       no  "
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stud_math_for_model = stud_math.loc[:, ['Medu', 'Fedu', 'studytime', 'age', 'granular', 'goout', 'sex', 'address', 'Mjob', 'higher', 'romantic']]\n",
    "stud_math_for_model.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**ВЫВОДЫ:**\n",
    "\n",
    "Итак, в результате EDA для анализа влияния условий жизни учащихся в возрасте от 15 до 22 лет на их успеваемость по математике были получены следующие выводы:\n",
    "\n",
    "**1.** В данных достаточно много пустых значений:\n",
    "\n",
    "Столбец 'age':\n",
    "Это числовой столбец. Пропусков нет, зато есть выбросы 21 и 22 года. Теперь у нас изменились данные с учетом 2х выбросов в 21 и 22 года. Самый популярный возраст 16 лет. Средний возраст учеников 16,7 лет. Миниальный 15 лет, максимальный 20.\n",
    "\n",
    "\n",
    "Столбец 'address': \n",
    "В этом строковом столбце было 17 попусков, которые мы заменили на самое частое значение (мода), в данном случае на 'U'.\n",
    "Большинство адресов (79%) находятся в U (в рамках города)\n",
    "\n",
    "\n",
    "Столбец 'famsize': \n",
    "В нашем строковом столбце было 17 пропусков по размеру семьи. Мы заменили их на самое частое значение (моду), в данном случае это GT3(размер семьи>3) После обработки мы видим, что 73% всех семей имеют больше 3х членов семьи, а 27% - менее 3х.\n",
    "\n",
    "\n",
    "Столбец 'Pstatus': \n",
    "В нашем строковом столбце было 45 пустых значений. Мы заменили их на самое частое значение (моду), в данном случае это T('T' - живут вместе 'A' - раздельно) После обработки у нас в 91% всех семей родители живут вместе.\n",
    "\n",
    "\n",
    "Столбец 'Medu': \n",
    "Это числовой столбец. Были пропуски, которые мы заменили на самое частое значение, в данном случае это '4.0'(0 - нет, 1 - 4 класса, 2 - 5-9 классы, 3 - среднее специальное или 11 классов, 4 - высшее). Выбросов нет. 34% матерей имеют высшее образование, меньше 1% не имеет образования совсем.\n",
    "\n",
    "\n",
    "Столбец 'Fedu':\n",
    "Это числовой столбец. В колонке была ошибка со значением 40.0, а также 24 пустых значения. Мы их заменили на моду '2.0'(0 - нет, 1 - 4 класса, 2 - 5-9 классы, 3 - среднее специальное или 11 классов, 4 - высшее). Большинство (33%) отцов имеют высшее образование 5-9 классов, и меньше 1% - вообще не имеют образования.\n",
    "\n",
    "Столбец 'Mjob':\n",
    "Это строковый столбец. В колонке есть 19 незаполненных значений. Мы заменили их на моду 'other'(другое). Большинство 38% матерей выбрали графу по работе \"другое\". Меньше всего (8%) работат в сфере здравоохранения.\n",
    "\n",
    "Столбец 'Fjob':\n",
    "Это строковый столбец. В колонке есть 36 незаполненных значений. Мы заменили их на моду 'other'(другое). Большинство 59% отцов выбрали графу по работе \"другое\". Меньше всего (4%) работат в сфере здравоохранения.\n",
    "\n",
    "\n",
    "Столбец 'reason':\n",
    "Это строковый столбец. В колонке есть 17 незаполненных строк. мы заменили их на самое частое значение 'course' ('home' - близость к дому, 'reputation' - репутация школы, 'course' - образовательная программа, 'other' - другое). Больше всего (39%) семей выбрали школу из-за образовательной программы. А меньше всего (8%) по другим причинам.\n",
    "\n",
    "\n",
    "Столбец 'guardian':\n",
    "Это строковый столбецю В колонке есть 30 незаполненных строк, мы заменили их на самое часто значение, в нашем случае это 'mother' ('mother' - мать, 'father' - отец, 'other' - другое). Больше всего (70%) опекунов -это матери. Меньше всего (7%) выбрали другой вариант.\n",
    "\n",
    "Столбец 'traveltime':\n",
    "Это числовой столбец.В колонке есть 28 пустых значений, мы заменили их на самое частое значение '1.0' (1 - <15 мин., 2 - 15-30 мин., 3 - 30-60 мин., 4 - >60 мин.). Выбросов нет. Больше всего (68%) семей тратят время на дорогу до школы не более 15 мин, и лишь 2% семей - больше часа.\n",
    "\n",
    "Столбец 'studytime':\n",
    "Это числовой столбец. В колонке есть 7 незаполненных строк, мы заменили их на самое частое значение '2.0' (1 - <2 часов, 2 - 2-5 часов, 3 - 5-10 часов, 4 - >10 часов). Выбросов нет. Больше всего (51%) ученики тратят время на учебу помимо школы от 2-5 часов в день, а 7 % больше 10 часов в день.\n",
    "\n",
    "\n",
    "Столбец 'failures':\n",
    "Это числовой столбец. Мы решили его удалить,т.к. в данном столбце у нас больше всего (293) у значения '0.0', которого не было даже в описании. Это значит, или тут какая-то ошибка, или люди целенаправленно ставили '0', чтобы показать что у них нет неудач. Также как и значения '4' тут также нет. Поэтому данный столбец не несет никакой смысловой нагрузки, т.к. вся информация искажена.\n",
    "\n",
    "Столбец 'fschoolsup':\n",
    "Это строковый столбец. В колонке есть 8 незаполненных строк, мы заменили их на самое частое значение 'no' . Больше всего (87%) учеников не пользуются дополнительной образовательной поддержкой.\n",
    "\n",
    "Столбец 'famsup':\n",
    "Это строковый столбец. В колонке есть 39 пустых значений, мы заменили их на самое частое значение 'yes' . Больше всего (66%) учеников пользуются семейной образовательной поддержкой.\n",
    "\n",
    "\n",
    "Столбец 'paid':\n",
    "Это строковый столбец. В колонке есть 40 незаполненных строк, мы заменили их на самое частое значение 'no' . Большинство 60% семей не платят за доп.занятия по математике.\n",
    "\n",
    "Столбец 'activities':\n",
    "Это строковый столбец. В колонке есть 14 незаполненных значения, мы заменили их на самое частое значение 'yes', хотя они практически равны, но все же значения 'yes' больше . Семьи распределились практически поровну на тех кто посещят доп.внеучебные занятия (53%) и кто не посещает(47%).\n",
    "\n",
    "\n",
    "Столбец 'nursery':\n",
    "Это строковый столбец. В колонке есть 16 незаполненных значений, мы заменили их на самое частое значение 'yes' . 80% школьников посещали детский сад.\n",
    "\n",
    "Столбец 'higher':\n",
    "Это строковый столбец. В колонке есть 18 незаполненных значений, мы заменили их на самое частое значение 'yes'. 95% школьников хотят получить высшее образование.\n",
    "\n",
    "Столбец 'internet':\n",
    "Это строковый столбец. В колонке есть 34 незаполненных значений, мы заменили их на самое частое значение 'yes'. У 86% школьников дома есть интернет.\n",
    "\n",
    "Столбец 'romantic':\n",
    "Это строковый столбец. В колонке есть 31 незаполненное значение, мы заменили их на самое частое значение 'no'. Большинство (69%) школьников не состоят в романтических отношениях.\n",
    "\n",
    "Столбец 'famrel':\n",
    "Это числовой столбец.В колонке есть 27 пустых значений и одна ошибка, мы заменили их на самое частое значение '4.0' (от 1 - очень плохо до 5 - очень хорошо). Выбросов нет. Больше всего (53%) семей имеют по шкале отношений '4', что значит что отношения хорошие, у 2% очень - плохие.\n",
    "\n",
    "Столбец 'freetime':\n",
    "Это числовой столбец. В колонке есть 11 пустых значений, мы заменили их на самое частое значение '3.0'. Выбросов нет. Большинство (42%) имеют свободное время '3' по шкале от 1 до 5. Только 9% имеют очень много свободого времени после школы, а 5% - совсем мало.\n",
    "\n",
    "\n",
    "Столбец 'goout':\n",
    "Это числовой столбец. В колонке есть 8 пустых значений, мы заменили их на самое частое значение '3.0'. Выбросов нет. Большинство (34%) проводят время с друзьями '3' по шкале от 1 до 5. 13% проводят очень много времени с друзьями, а 6% - совсем мало.\n",
    "\n",
    "Столбец 'health':\n",
    "Это числовой столбец. В колонке есть 15 пустых значений, мы заменили их на самое частое значение '5.0'. Выбросов нет. Большинство учеников (39%) имеют очень хорошее здоровье. А 12% - очень плохое.\n",
    "\n",
    "\n",
    "Столбец 'absences'.\n",
    "Это числовой столбец. В колонке есть 12 пустых значений, мы заменили их на самое частое значение '0.0' (нет пропущенных занятий). Мы нашли и удалили два выброса (212 и 385). Значений, встретившихся в столбце более 10 раз всего 8. Большинство (123 ученика) не пропустили ни одного занятия.\n",
    "\n",
    "\n",
    "Столбец 'score'.\n",
    "Это числовой столбец. В колонке есть 16 пустых значений, мы заменили их на самое частое значение '50.0'. Выбросов нет. Распределение нормальное. Значений, встретившихся в столбце более 10 раз всего 12. Большинство (60 учеников) имею баллов по госэкзамену по математике '50.0', что является практически средним значением. Также есть 37 учеников, не набравших ни одного была, это говорит скорее об ошибке, чем о том, что они не смогли ничего решить. Но мы не станем убирать эти значения.\n",
    "\n",
    "\n",
    "**2.** Выбросы найдены только в столбцах 'age' (21 и 22 года)  и 'absences' (212 и 385 пропусков), что позволяет сделать вывод о том, что данные достаточно чистые, т.к. вставлять единичные данные, которые будут портить нам статистику нет смысла.  Мы эти данные удалили из нашего датасета.\n",
    "\n",
    "**3.** Положительная корреляция, может говорить о том, что самое сильное влияние на оценку оказывает образование родителей, а также время, потраченное на учебу, помимо школы. Чем они выше, тем более высокие баллы получит ученик на экзамене по математике.\n",
    "\n",
    "Medu      0.20 - сильная корреляция\n",
    "Fedu      0.12 - значительная корреляция\n",
    "studytime 0.11 - значительная корреляция\n",
    "\n",
    "**4.** Отрицательная корреляция, может говорить о том, что, чем меньше возраст, время с друзьями на улице и granular, тем тем более высокие баллы получит ученик на экзамене по математике.\n",
    "\n",
    "age      -0.15 - значительная корреляция\n",
    "granular -0.11 - значительная корреляция\n",
    "goout    -0.12 - значительная корреляция\n",
    "\n",
    "**5.** Мы нашли новый параметр, о котором не говорилось вначале 'studytime, granular', который мы потом переименовали в 'granular'. Т.к. не было описания этого столбца, можно предположить, что он тесно связан со столбцом 'studytime', и т.к. значения там отрицательные (от -3 до -12), то из этих данных видно, что если ученик тратит менее 2х часов на учебу, то показатель 'granular' все больше уходит в минус (в данном случае это -12). \n",
    "\n",
    "**6.** Самые важные параметры, которые предлагается использовать в дальнейшем для построения модели, это **Medu, Fedu, studytime, age, granular, goout, sex, address, Mjob, higher, romantic**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
